<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BeanFactory容器的实现</title>
    <url>/2024/07/10/BeanFactory%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="1ab2d9fe6f7527de1245f3cca0e72b35.png" alt="截图" style="zoom:50%;" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Bean3 <span class="title function_">bean3</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean3</span>();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Bean4 <span class="title function_">bean4</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean4</span>();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean1构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line">       </span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="meta">@Resource(name = &quot;bean4&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Inter bean3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bean2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Inter <span class="title function_">getInter</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> bean3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Bean2</span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;Bean2构造器&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Bean3</span> <span class="keyword">implements</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="title function_">Bean3</span><span class="params">()</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;Bean3构造器&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Bean4</span> <span class="keyword">implements</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="title function_">Bean4</span><span class="params">()</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;Bean4构造器&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">        <span class="comment">//bean的定义(class,scope,初始化，销毁)</span></span><br><span class="line">        <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>,beanDefinition);</span><br><span class="line">        <span class="keyword">for</span> (String name : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="添加beanFactory后置处理器"><a href="#添加beanFactory后置处理器" class="headerlink" title="添加beanFactory后置处理器"></a>添加beanFactory后置处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">  <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">  <span class="comment">//bean的定义(class,scope,初始化，销毁)</span></span><br><span class="line">  <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line">  beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>,beanDefinition);</span><br><span class="line">  <span class="comment">//添加常用的后置处理器</span></span><br><span class="line">  AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">  <span class="comment">//BeanFactory 后置处理器主要功能 补充一些bean定义</span></span><br><span class="line">  beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values()</span><br><span class="line">          .forEach( beanFactoryPostProcessor-&gt;&#123;</span><br><span class="line">              beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (String name : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">      System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line">   System.out.println(beanFactory.getBean(Config.Bean1.class).getBean2());</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h2 id="添加bean后置处理器"><a href="#添加bean后置处理器" class="headerlink" title="添加bean后置处理器"></a>添加bean后置处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">    <span class="comment">//bean的定义(class,scope,初始化，销毁)</span></span><br><span class="line">    <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line">    beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>,beanDefinition);</span><br><span class="line">    <span class="comment">//添加常用的后置处理器</span></span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">    <span class="comment">//BeanFactory 后置处理器主要功能 补充一些bean定义</span></span><br><span class="line">    beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values()</span><br><span class="line">            .forEach( beanFactoryPostProcessor-&gt;&#123;</span><br><span class="line">                beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//Bean后处理器  针对bean的生命周期的各个阶段提供扩展 例如@Autowired @Resource</span></span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : beanFactory.getBeansOfType(BeanPostProcessor.class).values()) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(beanPostProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String name : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    beanFactory.preInstantiateSingletons();<span class="comment">//准备好所有单例</span></span><br><span class="line">    System.out.println(<span class="string">&quot;==============&gt;&quot;</span>);</span><br><span class="line">    System.out.println(beanFactory.getBean(Config.Bean1.class).getBean2());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>beanFactory不会做的事</p>
<ol>
<li>不会主动调用BeanFactory后置处理器</li>
<li>不会主动添加bean后置处理器</li>
<li>不会主动初始化单例</li>
<li>不会解析beanFactory 不会解析${} #{}</li>
</ol>
<h1 id="bean后置处理器会有排序的逻辑"><a href="#bean后置处理器会有排序的逻辑" class="headerlink" title="bean后置处理器会有排序的逻辑"></a>bean后置处理器会有排序的逻辑</h1><h2 id="先加载的后置处理器优先级高"><a href="#先加载的后置处理器优先级高" class="headerlink" title="先加载的后置处理器优先级高"></a>先加载的后置处理器优先级高</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">    <span class="comment">//bean的定义(class,scope,初始化，销毁)</span></span><br><span class="line">    <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line">    beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>,beanDefinition);</span><br><span class="line">    <span class="comment">//添加常用的后置处理器</span></span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">    <span class="comment">//BeanFactory 后置处理器主要功能 补充一些bean定义</span></span><br><span class="line">    beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values()</span><br><span class="line">            .forEach( beanFactoryPostProcessor-&gt;&#123;</span><br><span class="line">                beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//Bean后处理器  针对bean的生命周期的各个阶段提供扩展 例如@Autowired @Resource</span></span><br><span class="line">  beanFactory.getBeansOfType(BeanPostProcessor.class)</span><br><span class="line">            .values().stream().sorted(beanFactory.getDependencyComparator()).forEach(beanPostProcessor -&gt; &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;===&gt;&quot;</span>+beanPostProcessor);</span><br><span class="line">              beanFactory.addBeanPostProcessor(beanPostProcessor);</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String name : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    beanFactory.preInstantiateSingletons();<span class="comment">//准备好所有单例</span></span><br><span class="line">    System.out.println(<span class="string">&quot;==============&gt;&quot;</span>);</span><br><span class="line">    System.out.println(beanFactory.getBean(Config.Bean1.class).getInter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BeanFactory</category>
        <category>ApplicaionContext</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>从0开始搭建hexo</title>
    <url>/2024/07/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<ul>
<li>准备环境node.js</li>
<li>切换淘宝源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
<ul>
<li>安装hexo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install  -g  hexo-cli</span><br></pre></td></tr></table></figure>
<ul>
<li>验证hexo是否安装成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<ul>
<li>初始化hexo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##新建一个文件夹作为hexo的根目录</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<ul>
<li>hexo启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<ul>
<li>博客编写</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇博客文章&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>生成静态文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?vd_source=6a128c5132a08066dd8c2948fe5e50d4">参考链接</a></p>
]]></content>
  </entry>
  <entry>
    <title>HashMap集合扩容方法resize的源码解析</title>
    <url>/2024/07/10/HashMap%E9%9B%86%E5%90%88%E6%89%A9%E5%AE%B9%E6%96%B9%E6%B3%95resize%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 扩容方法</span><br><span class="line"> * 1. 计算新的容量和新的阈值</span><br><span class="line"> * 2. 创建新的数组</span><br><span class="line"> * 3. 将旧数组的元素迁移到新的数组中</span><br><span class="line"> */</span><br><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">    int oldThr = threshold;</span><br><span class="line">    int newCap, newThr = 0;</span><br><span class="line">    // 如果旧数组不为空</span><br><span class="line">    if (oldCap &gt; 0) &#123;</span><br><span class="line">        // 如果旧数组的容量 &gt;= MAXIMUM_CAPACITY，则将阈值设置为Integer.MAX_VALUE，并返回旧数组</span><br><span class="line">        if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            return oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果旧数组的容量 &gt;= DEFAULT_INITIAL_CAPACITY，则将新数组的容量设置为旧数组的容量*2，并将阈值设置为旧阈值*2</span><br><span class="line">        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果旧阈值大于0，则将新数组的容量设置为旧阈值，并将阈值设置为旧阈值</span><br><span class="line">    else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    // 否则，将新数组的容量设置为DEFAULT_INITIAL_CAPACITY，并将阈值设置为DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY</span><br><span class="line">    else &#123;               // zero initial threshold signifies using defaults</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果新阈值为0，则将新阈值设置为新数组的容量 * 负载因子，大于等于MAXIMUM_CAPACITY时，设置为Integer.MAX_VALUE</span><br><span class="line">    if (newThr == 0) &#123;</span><br><span class="line">        float ft = (float)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (int)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    // 如果旧数组不为空</span><br><span class="line">    if (oldTab != null) &#123;</span><br><span class="line">        // 遍历旧数组中的每个元素</span><br><span class="line">        for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            // 如果当前元素不为空</span><br><span class="line">            if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                oldTab[j] = null;</span><br><span class="line">                // 如果当前元素的下一个元素为空</span><br><span class="line">                if (e.next == null)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                // 如果当前元素是一个树节点</span><br><span class="line">                else if (e instanceof TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                // 否则，保持元素顺序</span><br><span class="line">                else &#123; // preserve order</span><br><span class="line">                    Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                            if (loTail == null)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (hiTail == null)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                 hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; while ((e = next) != null);</span><br><span class="line">                        if (loTail != null) &#123;</span><br><span class="line">                            loTail.next = null;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (hiTail != null) &#123;</span><br><span class="line">                            hiTail.next = null;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return newTab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap集合简介</title>
    <url>/2024/07/10/HasnMap%E9%9B%86%E5%90%88%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="1-HashMap集合简介"><a href="#1-HashMap集合简介" class="headerlink" title="1.HashMap集合简介"></a>1.HashMap集合简介</h2><p>HashMap基于哈希表的Map接口实现，是以key-Vaue存储形式存在，即主要用来存放键值对。HashMap的实<br>现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序<br>的。<br>    JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突（<strong>两个<br>对象调用的hashCode方法计算的哈希码值一致导致计算的数组索引值相同</strong>)而存在的(“拉链法”解决冲<br>突)JDK1.8以后在解决哈希冲突时有了较大的变化，<strong>当链表长度大于阈值（或者红黑树的边界值，默认为8）并<br>且当前数组的长度大于64时，此时此索引位置上的所有数据改为使用红黑树存储</strong>。<br>    补充：将链表转换成红黑树前会判断，即使阈值大于8，但是数组长度小于64，此时并不会将链表变为红黑树。而<br>是选择进行数组扩容。<br>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑<br>树需要进行左旋，右旋，变色这些操作来保持平衡。同时数组长度小于64时，搜索时间相对要快些。所以综上所<br>述为了提高性能和减少搜索时间，底层在阈值大于8并且数组长度大于64时，链表才转换为红黑树。具体可以参考<br>treeifyBin方法。<br>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于8并且数组长度大于64时，链表转换为红<br>黑树时，效率也变的更高效。</p>
<p>小结：<br>特点：</p>
<ol>
<li>存取无序的</li>
<li>键和值位置都可以是null,但是键位置只能是一个null</li>
<li>键位置是唯一的，底层的数据结构控制键的</li>
<li>jdk1.8前数据结构是：链表+数组jdk1.8之后是：链表+数组+红黑树</li>
<li>阈值(边界值)&gt;8并且数组长度大于64，才将链表转换为红黑树，变为红黑树的目的是为了高效的查询。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat异常处理</title>
    <url>/2024/07/11/tomcat%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="自定义error控制器"><a href="#自定义error控制器" class="headerlink" title="自定义error控制器"></a>自定义error控制器</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AnnotationConfigServletWebServerApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>(WebConfig.class);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">requestMappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        requestMappingHandlerMapping.getHandlerMethods().forEach(</span><br><span class="line">                (k,v)-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;映射路径：&quot;</span>+k+<span class="string">&quot;，方法信息：&quot;</span>+v);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ErrorProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.BeanNameViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">  <span class="comment">//tomcat容器创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">tomcatServletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcatServletWebServerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">        <span class="keyword">return</span> tomcatServletWebServerFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//DispatcherServlet创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将DispatcherServlet注册到tomcat容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">registrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerMapping <span class="title function_">requestMappingHandlerMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//默认RequestMappingHandlerAdapter没有Jackson转换器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">requestMappingHandlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RequestMappingHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">        adapter.setMessageConverters(Collections.singletonList(<span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>()));</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改Tomcat服务器默认错误页面地址</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ErrorPageRegistrar <span class="title function_">errorPageRegistrar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registry -&gt; registry.addErrorPages(<span class="keyword">new</span> <span class="title class_">ErrorPage</span>(<span class="string">&quot;/error&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误注册中心后置处理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ErrorPageRegistrarBeanPostProcessor <span class="title function_">errorPageRegistrarBeanPostProcessor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorPageRegistrarBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Controller</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Controller1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping(&quot;/error&quot;)</span></span><br><span class="line">        <span class="meta">@ResponseBody</span></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">error</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">e</span> <span class="operator">=</span> (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;error&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="BasicErrorController方式实现"><a href="#BasicErrorController方式实现" class="headerlink" title="BasicErrorController方式实现"></a>BasicErrorController方式实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ErrorProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.BeanNameViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">tomcatServletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcatServletWebServerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">        <span class="keyword">return</span> tomcatServletWebServerFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">registrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerMapping <span class="title function_">requestMappingHandlerMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//默认RequestMappingHandlerAdapter没有Jackson转换器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">requestMappingHandlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RequestMappingHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">        adapter.setMessageConverters(Collections.singletonList(<span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>()));</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改Tomcat服务器默认错误页面地址</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ErrorPageRegistrar <span class="title function_">errorPageRegistrar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registry -&gt; registry.addErrorPages(<span class="keyword">new</span> <span class="title class_">ErrorPage</span>(<span class="string">&quot;/error&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误注册中心后置处理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ErrorPageRegistrarBeanPostProcessor <span class="title function_">errorPageRegistrarBeanPostProcessor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorPageRegistrarBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BasicErrorController <span class="title function_">basicErrorController</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ErrorProperties</span> <span class="variable">errorProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorProperties</span>();</span><br><span class="line">        errorProperties.setIncludeException(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BasicErrorController</span>(<span class="keyword">new</span> <span class="title class_">DefaultErrorAttributes</span>(), errorProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">View</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">                response.getWriter().println(<span class="string">&quot;&lt;h3&gt;服务器内部错误&lt;/h3&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanNameViewResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Controller</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Controller1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>在浏览器访问时 响应头为<code>content-type:text/html</code>不能正确处理 要自定义视图View</li>
<li>响应头中<code>content-type:application/json</code>格式的可以正常访问</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动配置</title>
    <url>/2024/07/12/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="通过-Import-amp-Configuration"><a href="#通过-Import-amp-Configuration" class="headerlink" title="通过@Import&amp;@Configuration"></a>通过@Import&amp;@Configuration</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Import(&#123;Config1.class,Config2.class&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">Config1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean2 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="自己实现ImportSelector接口"><a href="#自己实现ImportSelector接口" class="headerlink" title="自己实现ImportSelector接口"></a>自己实现ImportSelector接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Import(&#123;MyImportSelector.class&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Bean1.class.getName(),Bean2.class.getName()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">Config1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean2 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="通过配置文件spring-factories"><a href="#通过配置文件spring-factories" class="headerlink" title="通过配置文件spring.factories"></a>通过配置文件spring.factories</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.SpringFactoriesLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="comment">//设置BeanDefinition不能重写</span></span><br><span class="line">        context.setAllowBeanDefinitionOverriding(<span class="literal">false</span>);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(context.getBean(Bean1.class));</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span> <span class="comment">//本项目配置类</span></span><br><span class="line">    <span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;本项目&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DeferredImportSelector 可以让本项目的优先级大于第三方的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            List&lt;String&gt; loadFactoryNames = SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;==============&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String name : loadFactoryNames) &#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;String&gt; factoryNames = SpringFactoriesLoader.loadFactoryNames(MyImportSelector.class, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> factoryNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">     <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">Config1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;第三方&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean2 <span class="title function_">bean2</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bean1&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bean2&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line"># 内部类用$</span><br><span class="line">com.github.ed.test.test5.Test$MyImportSelector=\</span><br><span class="line">com.github.ed.test.test5.Test$Config1,\</span><br><span class="line">com.github.ed.test.test5.Test$Config2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.github.ed.test.test5.TestAopAutoConfiguration$Config1,\</span><br><span class="line">com.github.ed.test.test5.TestAopAutoConfiguration$Config2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>路径为resources下的<strong>META-INF/spring.factories</strong><code>public static final String FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</code></li>
<li>如果本项目beanName与第三方beanName相同 默认是第三方的优先级高 实现<code>DeferredImportSelector</code>接口让本项目优先级高</li>
<li><code>@ConditionalOnMissingBean</code>如果没有相同名字的bean那么使用当前这个bean 有就不用</li>
</ul>
<h1 id="自定义条件装配"><a href="#自定义条件装配" class="headerlink" title="自定义条件装配"></a>自定义条件装配</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.SimpleCommandLinePropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.StandardEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAopAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        StandardEnvironment env=<span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">        env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(</span><br><span class="line">                <span class="string">&quot;--spring.aop.auto=true&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--spring.datasource.url=jdbc:mysql://localhost:3306/spikes&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--spring.datasource.username=root&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--spring.datasource.password=&quot;</span></span><br><span class="line">        ));</span><br><span class="line">        context.setEnvironment(env);</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> context.getBeanDefinition(name).getResourceDescription();</span><br><span class="line">            <span class="keyword">if</span>(description!=<span class="literal">null</span>)</span><br><span class="line">                System.out.println(name+<span class="string">&quot;来源：&quot;</span>+description);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@EnableAutoConfiguration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Conditional(MyConditional1.class)</span></span><br><span class="line">    <span class="meta">@interface</span> ConditionalOnClass&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span> ;</span><br><span class="line">        String <span class="title function_">className</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyConditional1</span> <span class="keyword">implements</span> <span class="title class_">Condition</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; annotationAttributes = metadata.getAnnotationAttributes(ConditionalOnClass.class.getName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> (String)annotationAttributes .get(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> (<span class="type">boolean</span>) annotationAttributes.get(<span class="string">&quot;exists&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">present</span> <span class="operator">=</span> ClassUtils.isPresent(className, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> exists == present;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(exists = false,className = &quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">Config1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(exists = true,className = &quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;)</span></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bean1&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bean2&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Srping</tag>
        <tag>SpringBoot</tag>
        <tag>EnableAutoConfiguration</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算符号</title>
    <url>/2024/07/10/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<p><img src="d9b621177848d14c0e4bf4f6db7bb8bd.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="39aa9a6b5c957be71fa161e839493de5.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="dfbee44eadb50646e843439d958480f5.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="779cf27779a825892b565d2730f413f2.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="73abc9c132b7763948dc1e38eecda717.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="c974b5ed76058f31c7fa0d7ae8a91878.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="b3853f5b461d17a7fb98e770a5b444a4.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="c8cd61a86fb17685bb404424480e7986.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="8d85ae1fac0bf36ee24aada00b326d17.png" alt="截图" style="zoom:50%;" /></p>
]]></content>
      <categories>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>ConfigurableApplicaionContext</title>
    <url>/2024/07/10/%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3ApplicationContext/</url>
    <content><![CDATA[<h1 id="ConfigurableApplicaionContext类图"><a href="#ConfigurableApplicaionContext类图" class="headerlink" title="ConfigurableApplicaionContext类图"></a>ConfigurableApplicaionContext类图</h1><p><img src="1dfc821c5b472f24e420ff6828bc887b.png" alt="截图"></p>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getMessage(<span class="string">&quot;hi&quot;</span>,<span class="literal">null</span>, Locale.CANADA);</span><br></pre></td></tr></table></figure>
<h2 id="根据通配符获取资源"><a href="#根据通配符获取资源" class="headerlink" title="根据通配符获取资源"></a>根据通配符获取资源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getResources(<span class="string">&quot;classpath*:top/javahai/subtlechat/test/**/*.class&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>“classpath*”中的 星号表示jar包中的也会扫描到</p>
<h2 id="获取配置信息"><a href="#获取配置信息" class="headerlink" title="获取配置信息"></a>获取配置信息</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getEnvironment().getProperty(<span class="string">&quot;JAVA_HOME&quot;</span>);</span><br><span class="line">context.getEnvironment().getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context.publishEvent(ApplicationEvent event);</span><br><span class="line">@EventListener</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ConfigurableApplicaionContext</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>对象绑定与类型转换</title>
    <url>/2024/07/10/%E5%AF%B9%E8%B1%A1%E7%BB%91%E5%AE%9A%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p><img src="177201d46ad49b83e6d0eb9875f55524.png" alt="截图" style="zoom:50%;" /></p>
<h1 id="底层第一套转换接口"><a href="#底层第一套转换接口" class="headerlink" title="底层第一套转换接口"></a>底层第一套转换接口</h1><p><img src="0da466df5107c976ec40711bd810def4.png" alt="截图" style="zoom:50%;" /></p>
<h1 id="底层第二套转换接口"><a href="#底层第二套转换接口" class="headerlink" title="底层第二套转换接口"></a>底层第二套转换接口</h1><p><img src="9d395ee86b7b40a0dd817408cc863bea.png" alt="截图" style="zoom:50%;" /></p>
<h1 id="高层接口与实现"><a href="#高层接口与实现" class="headerlink" title="高层接口与实现"></a>高层接口与实现</h1><p><img src="282680bf5a8b80c0b0b704e8f470724a.png" alt="截图" style="zoom:50%;" /></p>
<p><img src="6ffa1aa5090ed128e0950dbf43673414.png" alt="截图" style="zoom:50%;" /></p>
<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><h2 id="SimpleTypeConverter"><a href="#SimpleTypeConverter" class="headerlink" title="SimpleTypeConverter"></a>SimpleTypeConverter</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.SimpleTypeConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSimpleTypeConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SimpleTypeConverter simpleTypeConverter=<span class="keyword">new</span> <span class="title class_">org</span>.springframework.beans.SimpleTypeConverter();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> simpleTypeConverter.convertIfNecessary(<span class="string">&quot;13&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> simpleTypeConverter.convertIfNecessary(<span class="string">&quot;1997/03/21&quot;</span>, Date.class);</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="DirectFieldAccessor"><a href="#DirectFieldAccessor" class="headerlink" title="DirectFieldAccessor"></a>DirectFieldAccessor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.DirectFieldAccessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 走成员变量赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFieldWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TestBeanWrapper.<span class="type">MyBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestBeanWrapper</span>.MyBean();</span><br><span class="line">        DirectFieldAccessor directFieldAccessor=<span class="keyword">new</span> <span class="title class_">DirectFieldAccessor</span>(target);</span><br><span class="line">        directFieldAccessor.setPropertyValue(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        directFieldAccessor.setPropertyValue(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        directFieldAccessor.setPropertyValue(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;1997/03/21&quot;</span>);</span><br><span class="line">        System.out.println(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">MyBean</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Date c;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                    <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, c=&quot;</span> + c +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="BeanWrapper"><a href="#BeanWrapper" class="headerlink" title="BeanWrapper"></a>BeanWrapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanWrapperImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 走反射set方法赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBeanWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        BeanWrapper beanWrapper=<span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>(target);</span><br><span class="line">        beanWrapper.setPropertyValue(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        beanWrapper.setPropertyValue(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        beanWrapper.setPropertyValue(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;1997/03/21&quot;</span>);</span><br><span class="line">        System.out.println(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">MyBean</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Date c;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(String b)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Date <span class="title function_">getC</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setC</span><span class="params">(Date c)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                    <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, c=&quot;</span> + c +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="DataBinder"><a href="#DataBinder" class="headerlink" title="DataBinder"></a>DataBinder</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.MutablePropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.DataBinder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有两种方式</span></span><br><span class="line"><span class="comment"> * 1.走反射set方法</span></span><br><span class="line"><span class="comment"> * 2. dataBinder.initDirectFieldAccess();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDateBinder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        DataBinder dataBinder=<span class="keyword">new</span> <span class="title class_">DataBinder</span>(target);</span><br><span class="line">        dataBinder.initDirectFieldAccess();</span><br><span class="line">        MutablePropertyValues pvs=<span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">        pvs.add(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        pvs.add(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        pvs.add(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;1997/03/21&quot;</span>);</span><br><span class="line">        dataBinder.bind(pvs);</span><br><span class="line">        System.out.println(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">MyBean</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> a;</span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line">        <span class="keyword">private</span> Date c;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(String b)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Date <span class="title function_">getC</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setC</span><span class="params">(Date c)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                    <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, c=&quot;</span> + c +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Web环境下数据绑定ServletRequestDataBinder"><a href="#Web环境下数据绑定ServletRequestDataBinder" class="headerlink" title="Web环境下数据绑定ServletRequestDataBinder"></a>Web环境下数据绑定ServletRequestDataBinder</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.mock.web.MockHttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.ServletRequestDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.ServletRequestParameterPropertyValues;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServletRequestDataBinder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//web环境下数据绑定</span></span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        ServletRequestDataBinder dataBinder=<span class="keyword">new</span> <span class="title class_">ServletRequestDataBinder</span>(target);</span><br><span class="line">        MockHttpServletRequest request=<span class="keyword">new</span> <span class="title class_">MockHttpServletRequest</span>();</span><br><span class="line">        request.setParameter(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        request.setParameter(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        request.setParameter(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;1997/03/21&quot;</span>);</span><br><span class="line">        dataBinder.bind(<span class="keyword">new</span> <span class="title class_">ServletRequestParameterPropertyValues</span>(request));</span><br><span class="line">        System.out.println(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">MyBean</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> a;</span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line">        <span class="keyword">private</span> Date c;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(String b)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Date <span class="title function_">getC</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setC</span><span class="params">(Date c)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                    <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, c=&quot;</span> + c +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1P44y1N7QG?p=80&amp;spm_id_from=pageDriver&amp;vd_source=6a128c5132a08066dd8c2948fe5e50d4">参考链接</a></p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>SpringWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat内嵌容器</title>
    <url>/2024/07/12/Tomcat%E5%86%85%E5%B5%8C%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Tomcat结构图"><a href="#Tomcat结构图" class="headerlink" title="Tomcat结构图"></a>Tomcat结构图</h1><p><img src="26c9907ea4ce46a8505bc5a8b81c914e.png" alt="截图" style="zoom:50%;" /></p>
<h1 id="Tomcat内嵌容器"><a href="#Tomcat内嵌容器" class="headerlink" title="Tomcat内嵌容器"></a>Tomcat内嵌容器</h1><ol>
<li>创建 Tomcat 对象</li>
<li>创建项目文件来，即docBase文件夹</li>
<li>创建Tomcat 项目，在Tomcat 中称为 Context</li>
<li>编程添加 Servlet</li>
<li>启动 Tomcat</li>
<li>创建连接器,设置监听端口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test3.test4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.servlets.DefaultServlet;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.startup.Tomcat;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11Nio2Protocol;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContainerInitializer;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTomcat</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line"><span class="comment">//        1.创建 Tomcat 对象</span></span><br><span class="line">        Tomcat tomcat=<span class="keyword">new</span> <span class="title class_">Tomcat</span>();</span><br><span class="line">        tomcat.setBaseDir(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line"><span class="comment">//        2.创建项目文件来，即docBase文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">docBase</span> <span class="operator">=</span> Files.createTempDirectory(<span class="string">&quot;boot.&quot;</span>).toFile();</span><br><span class="line">        docBase.deleteOnExit();</span><br><span class="line"><span class="comment">//        3.创建Tomcat 项目，在Tomcat 中称为 Context</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> tomcat.addContext(<span class="string">&quot;&quot;</span>, docBase.getAbsolutePath());</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">springContext</span> <span class="operator">=</span> getApplicationContext();</span><br><span class="line"><span class="comment">//        4.编程添加 Servlet</span></span><br><span class="line">        context.addServletContainerInitializer(<span class="keyword">new</span> <span class="title class_">ServletContainerInitializer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; cs, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">                ctx.addServlet(<span class="string">&quot;aaa&quot;</span>,<span class="keyword">new</span> <span class="title class_">DefaultServlet</span>()).addMapping(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line"><span class="comment">//                DispatcherServlet dispatcherServlet = springContext.getBean(DispatcherServlet.class);</span></span><br><span class="line"><span class="comment">//                ctx.addServlet(&quot;dispatcherServlet&quot;,dispatcherServlet).addMapping(&quot;/&quot;);</span></span><br><span class="line">                <span class="keyword">for</span> (ServletRegistrationBean registrationBean :springContext.getBeansOfType(ServletRegistrationBean.class).values()) &#123;</span><br><span class="line">                    registrationBean.onStartup(ctx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Collections.emptySet());</span><br><span class="line"><span class="comment">//        5.启动 Tomcat</span></span><br><span class="line">        tomcat.start();</span><br><span class="line"><span class="comment">//        6.创建连接器,设置监听端口</span></span><br><span class="line">        <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="keyword">new</span> <span class="title class_">Http11Nio2Protocol</span>());</span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        tomcat.setConnector(connector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> WebApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">       AnnotationConfigWebApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">       context.register(Config.class);</span><br><span class="line">       context.refresh();</span><br><span class="line">       <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">dispatcherServletRegistrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet,<span class="string">&quot;/&quot;</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">requestMappingHandlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">RequestMappingHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">            adapter.setMessageConverters(Collections.singletonList(<span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>()));</span><br><span class="line">            <span class="keyword">return</span>  adapter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Controller</span></span><br><span class="line">        <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Controller1</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@GetMapping(&quot;/hello2&quot;)</span></span><br><span class="line">            <span class="meta">@ResponseBody</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;hello2&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Tomcat</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>获取方法参数名</title>
    <url>/2024/07/10/%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%90%8D/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#编译成class文件</span><br><span class="line">javac xxx.java</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># class里面有加本地变量表 asm使用 被编译的是接口方法无效</span><br><span class="line">javac -g xxx.java</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># class里面有加方法参数 jdk反射使用使用</span><br><span class="line">javac -parameters xxx.java</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 反编译查看</span><br><span class="line">javap -c -v xxx.java</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="javac-parameters"><a href="#javac-parameters" class="headerlink" title="javac -parameters"></a>javac -parameters</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">foo</span><span class="params">(String name,String value)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Bean1.class.getMethod(<span class="string">&quot;foo&quot;</span>, String.class,String.class);</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : method.getParameters()) &#123;</span><br><span class="line">            System.out.println(parameter.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br/></p>
<p><img src="fdd529e96aa46a13bbec92fda59bc85a.png" alt="截图" style="zoom:50%;" /></p>
<h2 id="javac-g"><a href="#javac-g" class="headerlink" title="javac -g"></a>javac -g</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.LocalVariableTableParameterNameDiscoverer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A22</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LocalVariableTableParameterNameDiscoverer localVariableTableParameterNameDiscoverer=<span class="keyword">new</span> <span class="title class_">LocalVariableTableParameterNameDiscoverer</span>();</span><br><span class="line">        String[] names = localVariableTableParameterNameDiscoverer.getParameterNames(Bean1.class.getMethod(<span class="string">&quot;foo&quot;</span>, String.class, String.class));</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="3a67ccb53f8e81be4818e44996acd3d9.png" alt="截图" style="zoom:50%;" /></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
