<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BeanFactory容器的实现</title>
    <url>/2024/07/10/BeanFactory%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<img src="1ab2d9fe6f7527de1245f3cca0e72b35.png" alt="截图" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Bean3 <span class="title function_">bean3</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean3</span>();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Bean4 <span class="title function_">bean4</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean4</span>();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean1构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line">       </span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="meta">@Resource(name = &quot;bean4&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Inter bean3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bean2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Inter <span class="title function_">getInter</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> bean3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Bean2</span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;Bean2构造器&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Bean3</span> <span class="keyword">implements</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="title function_">Bean3</span><span class="params">()</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;Bean3构造器&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Bean4</span> <span class="keyword">implements</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="title function_">Bean4</span><span class="params">()</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;Bean4构造器&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">        <span class="comment">//bean的定义(class,scope,初始化，销毁)</span></span><br><span class="line">        <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>,beanDefinition);</span><br><span class="line">        <span class="keyword">for</span> (String name : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加beanFactory后置处理器"><a href="#添加beanFactory后置处理器" class="headerlink" title="添加beanFactory后置处理器"></a>添加beanFactory后置处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">  <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">  <span class="comment">//bean的定义(class,scope,初始化，销毁)</span></span><br><span class="line">  <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line">  beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>,beanDefinition);</span><br><span class="line">  <span class="comment">//添加常用的后置处理器</span></span><br><span class="line">  AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">  <span class="comment">//BeanFactory 后置处理器主要功能 补充一些bean定义</span></span><br><span class="line">  beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values()</span><br><span class="line">          .forEach( beanFactoryPostProcessor-&gt;&#123;</span><br><span class="line">              beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (String name : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">      System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line">   System.out.println(beanFactory.getBean(Config.Bean1.class).getBean2());</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="添加bean后置处理器"><a href="#添加bean后置处理器" class="headerlink" title="添加bean后置处理器"></a>添加bean后置处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">    <span class="comment">//bean的定义(class,scope,初始化，销毁)</span></span><br><span class="line">    <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line">    beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>,beanDefinition);</span><br><span class="line">    <span class="comment">//添加常用的后置处理器</span></span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">    <span class="comment">//BeanFactory 后置处理器主要功能 补充一些bean定义</span></span><br><span class="line">    beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values()</span><br><span class="line">            .forEach( beanFactoryPostProcessor-&gt;&#123;</span><br><span class="line">                beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//Bean后处理器  针对bean的生命周期的各个阶段提供扩展 例如@Autowired @Resource</span></span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : beanFactory.getBeansOfType(BeanPostProcessor.class).values()) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(beanPostProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String name : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    beanFactory.preInstantiateSingletons();<span class="comment">//准备好所有单例</span></span><br><span class="line">    System.out.println(<span class="string">&quot;==============&gt;&quot;</span>);</span><br><span class="line">    System.out.println(beanFactory.getBean(Config.Bean1.class).getBean2());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br/>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>beanFactory不会做的事</p>
<ol>
<li>不会主动调用BeanFactory后置处理器</li>
<li>不会主动添加bean后置处理器</li>
<li>不会主动初始化单例</li>
<li>不会解析beanFactory 不会解析${} #{}</li>
</ol>
<h1 id="bean后置处理器会有排序的逻辑"><a href="#bean后置处理器会有排序的逻辑" class="headerlink" title="bean后置处理器会有排序的逻辑"></a>bean后置处理器会有排序的逻辑</h1><h2 id="先加载的后置处理器优先级高"><a href="#先加载的后置处理器优先级高" class="headerlink" title="先加载的后置处理器优先级高"></a>先加载的后置处理器优先级高</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">    <span class="comment">//bean的定义(class,scope,初始化，销毁)</span></span><br><span class="line">    <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line">    beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>,beanDefinition);</span><br><span class="line">    <span class="comment">//添加常用的后置处理器</span></span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">    <span class="comment">//BeanFactory 后置处理器主要功能 补充一些bean定义</span></span><br><span class="line">    beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values()</span><br><span class="line">            .forEach( beanFactoryPostProcessor-&gt;&#123;</span><br><span class="line">                beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//Bean后处理器  针对bean的生命周期的各个阶段提供扩展 例如@Autowired @Resource</span></span><br><span class="line">  beanFactory.getBeansOfType(BeanPostProcessor.class)</span><br><span class="line">            .values().stream().sorted(beanFactory.getDependencyComparator()).forEach(beanPostProcessor -&gt; &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;===&gt;&quot;</span>+beanPostProcessor);</span><br><span class="line">              beanFactory.addBeanPostProcessor(beanPostProcessor);</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String name : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    beanFactory.preInstantiateSingletons();<span class="comment">//准备好所有单例</span></span><br><span class="line">    System.out.println(<span class="string">&quot;==============&gt;&quot;</span>);</span><br><span class="line">    System.out.println(beanFactory.getBean(Config.Bean1.class).getInter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BeanFactory</category>
        <category>ApplicaionContext</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap集合扩容方法resize的源码解析</title>
    <url>/2024/07/10/HashMap%E9%9B%86%E5%90%88%E6%89%A9%E5%AE%B9%E6%96%B9%E6%B3%95resize%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 扩容方法</span><br><span class="line"> * 1. 计算新的容量和新的阈值</span><br><span class="line"> * 2. 创建新的数组</span><br><span class="line"> * 3. 将旧数组的元素迁移到新的数组中</span><br><span class="line"> */</span><br><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">    int oldThr = threshold;</span><br><span class="line">    int newCap, newThr = 0;</span><br><span class="line">    // 如果旧数组不为空</span><br><span class="line">    if (oldCap &gt; 0) &#123;</span><br><span class="line">        // 如果旧数组的容量 &gt;= MAXIMUM_CAPACITY，则将阈值设置为Integer.MAX_VALUE，并返回旧数组</span><br><span class="line">        if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            return oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果旧数组的容量 &gt;= DEFAULT_INITIAL_CAPACITY，则将新数组的容量设置为旧数组的容量*2，并将阈值设置为旧阈值*2</span><br><span class="line">        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果旧阈值大于0，则将新数组的容量设置为旧阈值，并将阈值设置为旧阈值</span><br><span class="line">    else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    // 否则，将新数组的容量设置为DEFAULT_INITIAL_CAPACITY，并将阈值设置为DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY</span><br><span class="line">    else &#123;               // zero initial threshold signifies using defaults</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果新阈值为0，则将新阈值设置为新数组的容量 * 负载因子，大于等于MAXIMUM_CAPACITY时，设置为Integer.MAX_VALUE</span><br><span class="line">    if (newThr == 0) &#123;</span><br><span class="line">        float ft = (float)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (int)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    // 如果旧数组不为空</span><br><span class="line">    if (oldTab != null) &#123;</span><br><span class="line">        // 遍历旧数组中的每个元素</span><br><span class="line">        for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            // 如果当前元素不为空</span><br><span class="line">            if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                oldTab[j] = null;</span><br><span class="line">                // 如果当前元素的下一个元素为空</span><br><span class="line">                if (e.next == null)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                // 如果当前元素是一个树节点</span><br><span class="line">                else if (e instanceof TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                // 否则，保持元素顺序</span><br><span class="line">                else &#123; // preserve order</span><br><span class="line">                    Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                            if (loTail == null)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (hiTail == null)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                 hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; while ((e = next) != null);</span><br><span class="line">                        if (loTail != null) &#123;</span><br><span class="line">                            loTail.next = null;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (hiTail != null) &#123;</span><br><span class="line">                            hiTail.next = null;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return newTab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap集合简介</title>
    <url>/2024/07/10/HasnMap%E9%9B%86%E5%90%88%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="1-HashMap集合简介"><a href="#1-HashMap集合简介" class="headerlink" title="1.HashMap集合简介"></a>1.HashMap集合简介</h2><p>HashMap基于哈希表的Map接口实现，是以key-Vaue存储形式存在，即主要用来存放键值对。HashMap的实<br>现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序<br>的。<br>    JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突（<strong>两个<br>对象调用的hashCode方法计算的哈希码值一致导致计算的数组索引值相同</strong>)而存在的(“拉链法”解决冲<br>突)JDK1.8以后在解决哈希冲突时有了较大的变化，<strong>当链表长度大于阈值（或者红黑树的边界值，默认为8）并<br>且当前数组的长度大于64时，此时此索引位置上的所有数据改为使用红黑树存储</strong>。<br>    补充：将链表转换成红黑树前会判断，即使阈值大于8，但是数组长度小于64，此时并不会将链表变为红黑树。而<br>是选择进行数组扩容。<br>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑<br>树需要进行左旋，右旋，变色这些操作来保持平衡。同时数组长度小于64时，搜索时间相对要快些。所以综上所<br>述为了提高性能和减少搜索时间，底层在阈值大于8并且数组长度大于64时，链表才转换为红黑树。具体可以参考<br>treeifyBin方法。<br>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于8并且数组长度大于64时，链表转换为红<br>黑树时，效率也变的更高效。</p>
<p>小结：<br>特点：</p>
<ol>
<li>存取无序的</li>
<li>键和值位置都可以是null,但是键位置只能是一个null</li>
<li>键位置是唯一的，底层的数据结构控制键的</li>
<li>jdk1.8前数据结构是：链表+数组jdk1.8之后是：链表+数组+红黑树</li>
<li>阈值(边界值)&gt;8并且数组长度大于64，才将链表转换为红黑树，变为红黑树的目的是为了高效的查询。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>RESP协议</title>
    <url>/2024/07/17/RESP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<blockquote>
<p>[!Note]</p>
<p>本文基于Redis6.2.6</p>
</blockquote>
<h1 id="RESP协议"><a href="#RESP协议" class="headerlink" title="RESP协议"></a>RESP协议</h1><h2 id="RESP协议-1"><a href="#RESP协议-1" class="headerlink" title="RESP协议"></a>RESP协议</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.2rv0xnazma.webp" alt="image" />

<h2 id="RESP协议-数据类型"><a href="#RESP协议-数据类型" class="headerlink" title="RESP协议-数据类型"></a>RESP协议-数据类型</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.6pneebv4qt.webp" alt="image" />


<blockquote>
<p><a href="https://www.bilibili.com/video/BV1cr4y1671t?p=148&spm_id_from=pageDriver&vd_source=6a128c5132a08066dd8c2948fe5e50d4">本文参考链接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>NOSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据结构</title>
    <url>/2024/07/16/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<p>[!Note]</p>
<p>本文基于Redis6.2.6</p>
</blockquote>
<h1 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h1><h2 id="动态字符串SDS"><a href="#动态字符串SDS" class="headerlink" title="动态字符串SDS"></a>动态字符串SDS</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715160916546.png" alt="image-20240715160916546" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715161812685.png" alt="image-20240715161812685" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715163041051.png" alt="image-20240715163041051" style="zoom:50%;" />

<h2 id="IntSet"><a href="#IntSet" class="headerlink" title="IntSet"></a>IntSet</h2><h3 id="InSet原理"><a href="#InSet原理" class="headerlink" title="InSet原理"></a>InSet原理</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715163658042.png" alt="image-20240715163658042" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715164225113.png" alt="image-20240715164225113" style="zoom:50%;" />

<p><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715164630418.png" alt="image-20240715164630418"></p>
<h3 id="IntSet新增流程"><a href="#IntSet新增流程" class="headerlink" title="IntSet新增流程"></a>IntSet新增流程</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715165508434.png" alt="image-20240715165508434" style="zoom:50%;" />

<h3 id="InSet升级流程"><a href="#InSet升级流程" class="headerlink" title="InSet升级流程"></a>InSet升级流程</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715165530462.png" alt="image-20240715165530462" style="zoom:50%;" />

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240715165822437.png" alt="image-20240715165822437" style="zoom:50%;" />

<h2 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h2><h3 id="Dict组成"><a href="#Dict组成" class="headerlink" title="Dict组成"></a>Dict组成</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/image-20240716092125672.png" alt="image-20240716092125672" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407160949139.png" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407160959519.png" alt="image-20240716095924397" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161000753.png" alt="image-20240716100029669" style="zoom:50%;" />

<h3 id="Dict的扩容"><a href="#Dict的扩容" class="headerlink" title="Dict的扩容"></a>Dict的扩容</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161021962.png" alt="image-20240716102114860" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161021077.png" alt="image-20240716102100935" style="zoom:50%;" />

<h3 id="Dict的rehash"><a href="#Dict的rehash" class="headerlink" title="Dict的rehash"></a>Dict的rehash</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161025572.png" alt="image-20240716102536465" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161027361.png" alt="image-20240716102700286" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161027567.png" alt="image-20240716102721490" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161027947.png" alt="image-20240716102756857" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161028076.png" alt="image-20240716102853003" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161029169.png" alt="image-20240716102910095" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161033518.png" alt="image-20240716103316387" style="zoom:50%;" />

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161033363.png" alt="image-20240716103341277" style="zoom:50%;" />

<h2 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h2><h3 id="ZipList定义与组成"><a href="#ZipList定义与组成" class="headerlink" title="ZipList定义与组成"></a>ZipList定义与组成</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161048637.png" alt="image-20240716104828546" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161048630.png" alt="image-202407161048630" style="zoom:50%;" />

<h3 id="ZipListEntry"><a href="#ZipListEntry" class="headerlink" title="ZipListEntry"></a>ZipListEntry</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161059923.png" alt="image-20240716105910837" style="zoom:50%;" />

<h3 id="Encoding编码"><a href="#Encoding编码" class="headerlink" title="Encoding编码"></a>Encoding编码</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161853713.png" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161925895.png" alt="image-20240716192505811" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161926033.png" alt="image-20240716192622900" style="zoom:50%;" />

<h3 id="ZipList的连锁更新问题"><a href="#ZipList的连锁更新问题" class="headerlink" title="ZipList的连锁更新问题"></a>ZipList的连锁更新问题</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161930012.png" alt="image-20240716193011788" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161931214.png" alt="202407161931214" style="zoom:50%;" />

<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161932533.png" alt="image-20240716193257464" style="zoom:50%;" />



<h2 id="QuickList"><a href="#QuickList" class="headerlink" title="QuickList"></a>QuickList</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161938414.png" alt="image-20240716193816316" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161939661.png" alt="image-20240716193937580" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161939693.png" alt="image-20240716193959503" style="zoom:50%;" />

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161941499.png" alt="image-20240716194100215" style="zoom:50%;" />

<h3 id="内存结构图"><a href="#内存结构图" class="headerlink" title="内存结构图"></a>内存结构图</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161944740.png" alt="image-20240716194403558" style="zoom:50%;" />

<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161944855.png" alt="image-20240716194434779" style="zoom:50%;" />





<h2 id="SkipList"><a href="#SkipList" class="headerlink" title="SkipList"></a>SkipList</h2><h3 id="SkipList-1"><a href="#SkipList-1" class="headerlink" title="SkipList"></a>SkipList</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161950692.png" alt="image-20240716195006616" style="zoom:50%;" />

<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161953692.png" alt="image-20240716195328500" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161954940.png" alt="image-20240716195458755" style="zoom:50%;" />

<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407161955249.png" alt="image-20240716195524046" style="zoom:50%;" />

<h2 id="RedisObject"><a href="#RedisObject" class="headerlink" title="RedisObject"></a>RedisObject</h2><h3 id="RedisObject-1"><a href="#RedisObject-1" class="headerlink" title="RedisObject"></a>RedisObject</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162000858.png" alt="image-20240716200010600" style="zoom:50%;" />

<h3 id="Redis的编码方式"><a href="#Redis的编码方式" class="headerlink" title="Redis的编码方式"></a>Redis的编码方式</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162000065.png" alt="image-20240716200029976" style="zoom:50%;" />

<h3 id="五种数据结构"><a href="#五种数据结构" class="headerlink" title="五种数据结构"></a>五种数据结构</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162001853.png" alt="image-20240716200115695" style="zoom:50%;" />



<h2 id="五种数据结构-1"><a href="#五种数据结构-1" class="headerlink" title="五种数据结构"></a>五种数据结构</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162008120.png" alt="image-20240716200839057" style="zoom:50%;" />

<h4 id="raw编码"><a href="#raw编码" class="headerlink" title="raw编码"></a>raw编码</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162009805.png" alt="image-20240716200947686" style="zoom:50%;" />

<h4 id="embstr编码"><a href="#embstr编码" class="headerlink" title="embstr编码"></a>embstr编码</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162007724.png" alt="image-20240716200728630" style="zoom:50%;" />

<h4 id="INT编码"><a href="#INT编码" class="headerlink" title="INT编码"></a>INT编码</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162013519.png" alt="image-20240716201302431" style="zoom:50%;" />

<h4 id="查看编码格式命令"><a href="#查看编码格式命令" class="headerlink" title="查看编码格式命令"></a>查看编码格式命令</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">object encoding key</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162015998.png" alt="image-20240716201522902" style="zoom:50%;" />

<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162020183.png" alt="image-20240716202004090" style="zoom:50%;" />

<h4 id="不同版本采取的编码"><a href="#不同版本采取的编码" class="headerlink" title="不同版本采取的编码"></a>不同版本采取的编码</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.6ik6hrc6fc.webp" alt="image6ik6hrc6fc" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.64dqqw840d.webp" alt="image64dqqw840d" />

<h4 id="内存结构图-1"><a href="#内存结构图-1" class="headerlink" title="内存结构图"></a>内存结构图</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/202407162129884.png" alt="image-20240716212934793" style="zoom:50%;" />

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/img-image.7p6jw397n.webp" alt="img-image" />

<h4 id="HT编码-Dict-与IntSet编码"><a href="#HT编码-Dict-与IntSet编码" class="headerlink" title="HT编码(Dict)与IntSet编码"></a>HT编码(Dict)与IntSet编码</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.41xy2uw1di.webp" alt="image" />

<h4 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.1ovblnit0f.webp" alt="image" />

<h4 id="set-max-intset-entries默认值"><a href="#set-max-intset-entries默认值" class="headerlink" title="set-max-intset-entries默认值"></a>set-max-intset-entries默认值</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.1vyjh38nff.webp" alt="image" />

<h4 id="内存结构图-2"><a href="#内存结构图-2" class="headerlink" title="内存结构图"></a>内存结构图</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.4xufibc0mm.webp" alt="image" />

<h3 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h3><h4 id="SkipList与HT-Dict"><a href="#SkipList与HT-Dict" class="headerlink" title="SkipList与HT(Dict)"></a>SkipList与HT(Dict)</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.1e8hsigjpj.webp" alt="image" />

<h4 id="内存结构图-3"><a href="#内存结构图-3" class="headerlink" title="内存结构图"></a>内存结构图</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.3goagkitc6.webp" alt="image" />

<h4 id="使用ZipList结构的条件"><a href="#使用ZipList结构的条件" class="headerlink" title="使用ZipList结构的条件"></a>使用ZipList结构的条件</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.7zqbjjpwla.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.5q7b025pmm.webp" alt="image" />

<h4 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.41xy2vlq9c.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.45km79una.webp" alt="image" />

<h4 id="使用ZipList时排序问题"><a href="#使用ZipList时排序问题" class="headerlink" title="使用ZipList时排序问题"></a>使用ZipList时排序问题</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.2yy8rzv4ja.webp" alt="image" />

<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><h4 id="hash结构特点，与ZSet的区别"><a href="#hash结构特点，与ZSet的区别" class="headerlink" title="hash结构特点，与ZSet的区别"></a>hash结构特点，与ZSet的区别</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.3k7web6cc9.webp" alt="image" />

<h4 id="内存结构图-4"><a href="#内存结构图-4" class="headerlink" title="内存结构图"></a>内存结构图</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.9gwglbotzt.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.73tu44bntt.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.6t70aywvzl.webp" alt="image" />

<h4 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.3k7webcbyq.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.4n7lp7bhhi.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.6pned9dn64.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.45hk0mdz02.webp" alt="image" />

<h4 id="命令设置ZipList个数与数量限制"><a href="#命令设置ZipList个数与数量限制" class="headerlink" title="命令设置ZipList个数与数量限制"></a>命令设置ZipList个数与数量限制</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.8ad5cqexaz.webp" alt="image" />

<blockquote>
<p><a href="https://www.bilibili.com/video/BV1cr4y1671t?p=148&spm_id_from=pageDriver&vd_source=6a128c5132a08066dd8c2948fe5e50d4">本文参考链接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>NOSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis网络模型</title>
    <url>/2024/07/17/Redis%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>[!Note]</p>
<p>本文基于Redis6.2.6</p>
</blockquote>
<h1 id="Redis网络模型"><a href="#Redis网络模型" class="headerlink" title="Redis网络模型"></a>Redis网络模型</h1><h2 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.99t8qovwyh.webp" alt="image" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.54xnel23i3.webp" alt="image" />

<h2 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.54xnel69zg.webp" alt="image" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.3k7wf4ao78.webp" alt="image" />

<h2 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.4g4duko59f.webp" alt="image" />

<h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><h3 id="IO多路复用-1"><a href="#IO多路复用-1" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.3uuq8a2rvv.webp" alt="image" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.7egny3akk1.webp" alt="image" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/20240716/image.6m3sgcw8id.webp" alt="image" />

<h3 id="IO多路复用-select"><a href="#IO多路复用-select" class="headerlink" title="IO多路复用-select"></a>IO多路复用-select</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.6m3sgfudn5.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.86tjfwtbij.webp" alt="image" />

<h3 id="IO多路复用-poll"><a href="#IO多路复用-poll" class="headerlink" title="IO多路复用-poll"></a>IO多路复用-poll</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.4ckrwymvxg.webp" alt="image" />

<h3 id="IO多路复用-epoll"><a href="#IO多路复用-epoll" class="headerlink" title="IO多路复用-epoll"></a>IO多路复用-epoll</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.8vmszy1dth.webp" alt="image" />

<h4 id="IO多路复用-事件通知机制"><a href="#IO多路复用-事件通知机制" class="headerlink" title="IO多路复用-事件通知机制"></a>IO多路复用-事件通知机制</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.231rdhvs4s.webp" alt="image" />

<h4 id="IO多路复用-web服务流程"><a href="#IO多路复用-web服务流程" class="headerlink" title="IO多路复用-web服务流程"></a>IO多路复用-web服务流程</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.wig4whatd.webp" alt="image" />

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.1ovbmmakdq.webp" alt="image" />

<h2 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.6f0kl1tc3t.webp" alt="image" />

<h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.3goahjp8uv.webp" alt="image" />

<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.1aovvrz05y.webp" alt="image" />

<h2 id="Redis网络模型-1"><a href="#Redis网络模型-1" class="headerlink" title="Redis网络模型"></a>Redis网络模型</h2><h3 id="Redis到底是单线程还是多线程？"><a href="#Redis到底是单线程还是多线程？" class="headerlink" title="Redis到底是单线程还是多线程？"></a>Redis到底是单线程还是多线程？</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.3goahjx0ok.webp" alt="image" />

<h3 id="为什么Redis要选择单线程？"><a href="#为什么Redis要选择单线程？" class="headerlink" title="为什么Redis要选择单线程？"></a>为什么Redis要选择单线程？</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.231rdio31d.webp" alt="image" />

<h3 id="Redis网络模型api"><a href="#Redis网络模型api" class="headerlink" title="Redis网络模型api"></a>Redis网络模型api</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.2krt259dkn.webp" alt="image" />

<h3 id="Redis网络模型源码"><a href="#Redis网络模型源码" class="headerlink" title="Redis网络模型源码"></a>Redis网络模型源码</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.3uuq8i0bcx.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.pf89ki000.webp" alt="image" />
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.pf89krv0r.webp" alt="image" />

<h3 id="Redis网络模型单线程流程图"><a href="#Redis网络模型单线程流程图" class="headerlink" title="Redis网络模型单线程流程图"></a>Redis网络模型单线程流程图</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.5mnp3f7fuy.webp" alt="image" />

<h3 id="Redis网络模型多线程流程图"><a href="#Redis网络模型多线程流程图" class="headerlink" title="Redis网络模型多线程流程图"></a>Redis网络模型多线程流程图</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.4xufjepgmy.webp" alt="image" />

<blockquote>
<p><a href="https://www.bilibili.com/video/BV1cr4y1671t?p=148&spm_id_from=pageDriver&vd_source=6a128c5132a08066dd8c2948fe5e50d4">本文参考链接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>NOSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis内存策略</title>
    <url>/2024/07/17/Redis%E5%86%85%E5%AD%98%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<blockquote>
<p>[!Note]</p>
<p>本文基于Redis6.2.6</p>
</blockquote>
<h1 id="Redis内存策略"><a href="#Redis内存策略" class="headerlink" title="Redis内存策略"></a>Redis内存策略</h1><h2 id="Redis内存回收"><a href="#Redis内存回收" class="headerlink" title="Redis内存回收"></a>Redis内存回收</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.6t70c39i9x.webp" alt="image" />

<h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.lvmbxfujo.webp" alt="image" />

<h3 id="过期策略-DB结构"><a href="#过期策略-DB结构" class="headerlink" title="过期策略-DB结构"></a>过期策略-DB结构</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.8ad5dujztz.webp" alt="image" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.1hs3rduxj4.webp" alt="image" />

<h3 id="过期策略-惰性删除"><a href="#过期策略-惰性删除" class="headerlink" title="过期策略-惰性删除"></a>过期策略-惰性删除</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.7ljvtu19nc.webp" alt="image" />

<h3 id="过期策略-周期删除"><a href="#过期策略-周期删除" class="headerlink" title="过期策略-周期删除"></a>过期策略-周期删除</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.5mnp3i3aaw.webp" alt="image" />

<h4 id="SLOW模式与FAST模式"><a href="#SLOW模式与FAST模式" class="headerlink" title="SLOW模式与FAST模式"></a>SLOW模式与FAST模式</h4><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.4jnzsmcka3.webp" alt="image" />

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.5mnp3i9fv3.webp" alt="image" />

<h2 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h2><h3 id="内存淘汰"><a href="#内存淘汰" class="headerlink" title="内存淘汰"></a>内存淘汰</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.2rv0xsltsa.webp" alt="image" />

<h3 id="八种淘汰策略"><a href="#八种淘汰策略" class="headerlink" title="八种淘汰策略"></a>八种淘汰策略</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.1aovw1my1s.webp" alt="image" />

<h3 id="LFU与LFU的淘汰算法"><a href="#LFU与LFU的淘汰算法" class="headerlink" title="LFU与LFU的淘汰算法"></a>LFU与LFU的淘汰算法</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.8hgd9dsapy.webp" alt="image" />

<h3 id="执行淘汰流程图"><a href="#执行淘汰流程图" class="headerlink" title="执行淘汰流程图"></a>执行淘汰流程图</h3><img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.8vmt09gydl.webp" alt="image" />

<blockquote>
<p><a href="https://www.bilibili.com/video/BV1cr4y1671t?p=148&spm_id_from=pageDriver&vd_source=6a128c5132a08066dd8c2948fe5e50d4">本文参考链接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>NOSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot启动过程</title>
    <url>/2024/07/13/SpringBoot%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="SpringBoot启动过程"><a href="#SpringBoot启动过程" class="headerlink" title="SpringBoot启动过程"></a>SpringBoot启动过程</h1><h2 id="创建-SpringApplication-对象"><a href="#创建-SpringApplication-对象" class="headerlink" title="创建 SpringApplication 对象"></a>创建 SpringApplication 对象</h2><ol>
<li>记录 BeanDefinition 源</li>
<li>推断应用类型</li>
<li>记录 Applicationcontext 初始化器</li>
<li>记录监听器与事件</li>
<li>推断主启动类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.WebApplicationType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Test1.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">// 1.演示获取 BeanDefinition 源</span></span><br><span class="line">        SpringApplication spring=<span class="keyword">new</span> <span class="title class_">SpringApplication</span>(Test1.class);</span><br><span class="line">        spring.setSources(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;classpath:bean2.xml&quot;</span>)));</span><br><span class="line">    <span class="comment">//2.演示推断应用类型 WebApplicationType.deduceFromClasspath()</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">declaredMethod</span> <span class="operator">=</span> WebApplicationType.class.getDeclaredMethod(<span class="string">&quot;deduceFromClasspath&quot;</span>);</span><br><span class="line">        declaredMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;推断应用类型：&quot;</span>+declaredMethod.invoke(<span class="literal">null</span>));</span><br><span class="line">     <span class="comment">//3.演示 Applicationcontext 初始化器</span></span><br><span class="line">        <span class="comment">// this.getSpringFactoriesInstances(ApplicationContextInitializer.class)  作用：对Applicationcontext做扩展</span></span><br><span class="line">        spring.addInitializers(applicationContext -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(applicationContext <span class="keyword">instanceof</span> GenericApplicationContext)&#123;</span><br><span class="line">                GenericApplicationContext  genericApplicationContext=(GenericApplicationContext)applicationContext;</span><br><span class="line">                genericApplicationContext.registerBean(<span class="string">&quot;bean3&quot;</span>,Bean3.class);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化器&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">//4.演示监听器与事件</span></span><br><span class="line">        <span class="comment">//this.getSpringFactoriesInstances(ApplicationListener.class)</span></span><br><span class="line">        spring.addListeners(event -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t事件为：&quot;</span>+event.getClass());</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">//5.推断主启动类</span></span><br><span class="line">       <span class="comment">//this.deduceMainApplicationClass();</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">deduceMainApplicationClass</span> <span class="operator">=</span> SpringApplication.class.getDeclaredMethod(<span class="string">&quot;deduceMainApplicationClass&quot;</span>);</span><br><span class="line">        deduceMainApplicationClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;主启动类：&quot;</span>+deduceMainApplicationClass.invoke(spring));</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> spring.run();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resourceDescription</span> <span class="operator">=</span> context.getBeanFactory().getBeanDefinition(beanDefinitionName).getResourceDescription();</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span>+beanDefinitionName+<span class="string">&quot;来源：&quot;</span>+resourceDescription);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">Bean1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">Bean2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">Bean3</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean3</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletWebServerFactory <span class="title function_">tomcatServletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.ed.test.test7.Test1.Bean2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="执行-run-方法"><a href="#执行-run-方法" class="headerlink" title="执行 run 方法"></a>执行 run 方法</h2><ol>
<li>得到 SpringApplicationRunListeners, 事件发布器</li>
</ol>
<ul>
<li>发布 application starting事件</li>
</ul>
<ol start="2">
<li>封装启动 args</li>
<li>准备 Environment 添加命令行参数(*)</li>
<li>ConfigurationPropertySources 处理(*)</li>
</ol>
<ul>
<li>发布 application environment 已准备事件</li>
</ul>
<ol start="5">
<li>通过 EnvironmentPostProcessorApplicationListener 进行 env 后处理(*)</li>
</ol>
<ul>
<li>application.properties，由StandardConfigDataLocationResolver 解析</li>
<li>spring.application.json</li>
</ul>
<ol start="6">
<li>绑定 spring.main 到 SpringApplication 对象(*)</li>
<li>打印banner(*)</li>
<li>创建容器</li>
<li>准备容器</li>
<li>得到所有的BeanDefinition源加载到容器</li>
<li>调用refresh</li>
<li>调用所有实现ApplicationRunner CommandLineRunner 的Bean</li>
</ol>
<p>&#x3D;&#x3D;<strong>注意：演示基于SpringBoot 2.7.6版本</strong>&#x3D;&#x3D;</p>
<h3 id="演示run执行第1步"><a href="#演示run执行第1步" class="headerlink" title="演示run执行第1步"></a>演示run执行第1步</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ConfigurableBootstrapContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.DefaultBootstrapContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplicationRunListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.EventPublishingRunListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.StandardEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.SpringFactoriesLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//得到 SpringApplicationRunListeners,事件发布器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.演示获取 BeanDefinition 源</span></span><br><span class="line">        SpringApplication app=<span class="keyword">new</span> <span class="title class_">SpringApplication</span>(Test1.class);</span><br><span class="line">        app.addListeners(event -&gt; System.out.println(<span class="string">&quot;\t事件为：&quot;</span>+event.getClass()));</span><br><span class="line">        <span class="comment">//获取事件发送器实现类名</span></span><br><span class="line">        List&lt;String&gt; loadFactoryNames = SpringFactoriesLoader.loadFactoryNames(SpringApplicationRunListener.class, Test2.class.getClassLoader());</span><br><span class="line">        <span class="keyword">for</span> (String loadFactoryName : loadFactoryNames) &#123;</span><br><span class="line">            System.out.println(loadFactoryName);</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(loadFactoryName);</span><br><span class="line">            Constructor&lt;?&gt; constructor = clazz.getConstructor(SpringApplication.class, String[].class);</span><br><span class="line">            <span class="type">SpringApplicationRunListener</span> <span class="variable">publisher</span> <span class="operator">=</span> (SpringApplicationRunListener) constructor.newInstance(app,args);</span><br><span class="line">            <span class="comment">//发布事件</span></span><br><span class="line">            <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>();</span><br><span class="line">            GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">            publisher.starting(bootstrapContext);<span class="comment">//Spring boot 开始启动</span></span><br><span class="line">            publisher.environmentPrepared(bootstrapContext,<span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>());<span class="comment">// 环境信息准备完毕</span></span><br><span class="line">            publisher.contextPrepared(context);<span class="comment">//在Spring容器创建 并调用初始化器之后 发送此事件</span></span><br><span class="line">            publisher.contextLoaded(context);<span class="comment">// 在所有的BeanDefinition 加载完毕</span></span><br><span class="line">            context.refresh();</span><br><span class="line">            publisher.started(context,Duration.ZERO);<span class="comment">//Spring容器初始化完成(refresh 方法调用完毕)</span></span><br><span class="line">            publisher.ready(context,Duration.ZERO);<span class="comment">// Spring boot 启动完毕</span></span><br><span class="line">            publisher.failed(context,<span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;出错了&quot;</span>));<span class="comment">//Spring boot 启动报错</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="演示8-11步"><a href="#演示8-11步" class="headerlink" title="演示8~11步"></a>演示8~11步</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.WebApplicationType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotatedBeanDefinitionReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行时请添加运行参数--server.port=8080 debug</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication  app=<span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">        app.addListeners(event -&gt; System.out.println(<span class="string">&quot;执行初始化器增强&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;2.封装启动 args&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;8.创建容器&quot;</span>);</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> createApplicationContext(WebApplicationType.SERVLET);</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;9.准备容器&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ApplicationContextInitializer initializer : app.getInitializers()) &#123;</span><br><span class="line">            initializer.initialize(context);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;10.得到所有的BeanDefinition源加载到容器&quot;</span>);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line">        AnnotatedBeanDefinitionReader reader1=<span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">        reader1.register(Config.class);</span><br><span class="line">        XmlBeanDefinitionReader reader2=<span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">        reader2.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;bean4.xml&quot;</span>));</span><br><span class="line">        ClassPathBeanDefinitionScanner scanner=<span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(beanFactory);</span><br><span class="line">        scanner.scan(<span class="string">&quot;com.github.ed.test.test7.sub&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;11.调用refresh&quot;</span>);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resourceDescription</span> <span class="operator">=</span> beanFactory.getBeanDefinition(name).getResourceDescription();</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot; 来源:&quot;</span>+resourceDescription);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;12.执行runner&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> GenericApplicationContext <span class="title function_">createApplicationContext</span><span class="params">(WebApplicationType webApplicationType)</span>&#123;</span><br><span class="line">        GenericApplicationContext context=<span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (webApplicationType) &#123;</span><br><span class="line">                <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    context=   <span class="keyword">new</span> <span class="title class_">AnnotationConfigReactiveWebApplicationContext</span>();</span><br><span class="line">                <span class="keyword">case</span> SERVLET:</span><br><span class="line">                    context=   <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NONE:</span><br><span class="line">                    context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean4</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean4</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean5</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean5</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean6</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean6</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">Config</span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean5 <span class="title function_">bean5</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean5</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> ServletWebServerFactory <span class="title function_">servletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7.sub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean7</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.ed.test.test7.Test3.Bean4&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="演示第2、12步"><a href="#演示第2、12步" class="headerlink" title="演示第2、12步"></a>演示第2、12步</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.DefaultApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.WebApplicationType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotatedBeanDefinitionReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行时请添加运行参数--server.port=8080 debug</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication  app=<span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">        app.addListeners(event -&gt; System.out.println(<span class="string">&quot;执行初始化器增强&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;2.封装启动 args&quot;</span>);</span><br><span class="line">        <span class="type">DefaultApplicationArguments</span> <span class="variable">arguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;8.创建容器&quot;</span>);</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> createApplicationContext(WebApplicationType.SERVLET);</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;9.准备容器&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ApplicationContextInitializer initializer : app.getInitializers()) &#123;</span><br><span class="line">            initializer.initialize(context);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;10.得到所有的BeanDefinition源加载到容器&quot;</span>);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line">        AnnotatedBeanDefinitionReader reader1=<span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">        reader1.register(Config.class);</span><br><span class="line">        XmlBeanDefinitionReader reader2=<span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">        reader2.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;bean4.xml&quot;</span>));</span><br><span class="line">        ClassPathBeanDefinitionScanner scanner=<span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(beanFactory);</span><br><span class="line">        scanner.scan(<span class="string">&quot;com.github.ed.test.test7.sub&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;11.调用refresh&quot;</span>);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resourceDescription</span> <span class="operator">=</span> beanFactory.getBeanDefinition(name).getResourceDescription();</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot; 来源:&quot;</span>+resourceDescription);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt;12.执行runner&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CommandLineRunner commandLineRunner : context.getBeansOfType(CommandLineRunner.class).values()) &#123;</span><br><span class="line">            commandLineRunner.run(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ApplicationRunner applicationRunner : context.getBeansOfType(ApplicationRunner.class).values()) &#123;</span><br><span class="line">            applicationRunner.run(arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> GenericApplicationContext <span class="title function_">createApplicationContext</span><span class="params">(WebApplicationType webApplicationType)</span>&#123;</span><br><span class="line">        GenericApplicationContext context=<span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (webApplicationType) &#123;</span><br><span class="line">                <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    context=   <span class="keyword">new</span> <span class="title class_">AnnotationConfigReactiveWebApplicationContext</span>();</span><br><span class="line">                <span class="keyword">case</span> SERVLET:</span><br><span class="line">                    context=   <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NONE:</span><br><span class="line">                    context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean4</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean4</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean5</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean5</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean6</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean6</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">Config</span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean5 <span class="title function_">bean5</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean5</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> ServletWebServerFactory <span class="title function_">servletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> ApplicationRunner <span class="title function_">applicationRunner</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;applicationRunner()...&quot;</span>+Arrays.toString(args.getSourceArgs()));</span><br><span class="line">                System.out.println(args.getOptionNames());</span><br><span class="line">                System.out.println(args.getOptionValues(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">                System.out.println(args.getNonOptionArgs());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> args -&gt; System.out.println(<span class="string">&quot;commandLineRunner()...&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="演示第3步"><a href="#演示第3步" class="headerlink" title="演示第3步"></a>演示第3步</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.DefaultPropertiesPropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.source.ConfigurationPropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurablePropertyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.MutablePropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.SimpleCommandLinePropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.StandardEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">//准备 Environment 添加命令行参数(*)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Step3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//系统环境变量,properties,yaml</span></span><br><span class="line">        ApplicationEnvironment env=<span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;application.properties&quot;</span>)));</span><br><span class="line">        <span class="comment">//设置命令行</span></span><br><span class="line">        env.getPropertySources().addFirst(<span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(args));</span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; ps : env.getPropertySources()) &#123;</span><br><span class="line">            System.out.println(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;JAVA_HOME&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>   <span class="title class_">ApplicationEnvironment</span> <span class="keyword">extends</span> <span class="title class_">StandardEnvironment</span>&#123;</span><br><span class="line">        ApplicationEnvironment() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetActiveProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetDefaultProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> ConfigurablePropertyResolver <span class="title function_">createPropertyResolver</span><span class="params">(MutablePropertySources propertySources)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ConfigurationPropertySources.createPropertyResolver(propertySources);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="演示第4步"><a href="#演示第4步" class="headerlink" title="演示第4步"></a>演示第4步</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.source.ConfigurationPropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurablePropertyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.MutablePropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.StandardEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">//ConfigurationPropertySources 处理(*)</span></span><br><span class="line"><span class="comment">//发布 application environment 已准备事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Step4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span><span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        ApplicationEnvironment env= <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>( <span class="string">&quot;step4&quot;</span>, <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;step4.properties&quot;</span>)));</span><br><span class="line">        <span class="comment">//添加ConfigurationPropertySourcesPropertySource 解析不规范的符号</span></span><br><span class="line">        ConfigurationPropertySources.attach(env);</span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : env.getPropertySources()) &#123;</span><br><span class="line">            System.out.println(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;user.first-name&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;user.middle-name&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;user.last-name&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>   <span class="title class_">ApplicationEnvironment</span> <span class="keyword">extends</span> <span class="title class_">StandardEnvironment</span> &#123;</span><br><span class="line">        ApplicationEnvironment() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetActiveProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetDefaultProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> ConfigurablePropertyResolver <span class="title function_">createPropertyResolver</span><span class="params">(MutablePropertySources propertySources)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ConfigurationPropertySources.createPropertyResolver(propertySources);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">user.first-name</span>=<span class="string">Georgecer</span></span><br><span class="line"><span class="attr">user.middle_name</span>=<span class="string">Walken</span></span><br><span class="line"><span class="attr">user.lastName</span>=<span class="string">Bush</span></span><br></pre></td></tr></table></figure>

<h3 id="演示第5步"><a href="#演示第5步" class="headerlink" title="演示第5步"></a>演示第5步</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.DefaultBootstrapContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.EventPublishingRunListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.source.ConfigurationPropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.env.EnvironmentPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.env.EnvironmentPostProcessorApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.env.RandomValuePropertySourceEnvironmentPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.logging.DeferredLog;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.logging.DeferredLogs;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurablePropertyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.MutablePropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.StandardEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.SpringFactoriesLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过 EnvironmentPostProcessorApplicationListener 进行 env 后处理(*)</span></span><br><span class="line"><span class="comment"> *  application.properties，由StandardConfigDataLocationResolver 解析</span></span><br><span class="line"><span class="comment"> *  spring.application.json</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Step5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication app=<span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">        app.addListeners(<span class="keyword">new</span> <span class="title class_">EnvironmentPostProcessorApplicationListener</span>());</span><br><span class="line">        List&lt;String&gt; loadFactoryNames = SpringFactoriesLoader.loadFactoryNames(EnvironmentPostProcessor.class, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (String loadFactoryName : loadFactoryNames) &#123;</span><br><span class="line">            System.out.println(loadFactoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        EventPublishingRunListener publisher=<span class="keyword">new</span> <span class="title class_">EventPublishingRunListener</span>(app,args);</span><br><span class="line">        ApplicationEnvironment env=<span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;增强前&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : env.getPropertySources()) &#123;</span><br><span class="line">            System.out.println(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        publisher.environmentPrepared(<span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>(),env);</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;增强后&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : env.getPropertySources()) &#123;</span><br><span class="line">            System.out.println(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        SpringApplication app=<span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">        ApplicationEnvironment env= <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;增强前&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : env.getPropertySources()) &#123;</span><br><span class="line">            System.out.println(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ConfigDataEnvironmentPostProcessor</span> <span class="variable">postProcessor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigDataEnvironmentPostProcessor</span>(<span class="keyword">new</span> <span class="title class_">DeferredLogs</span>(), <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>());</span><br><span class="line">        postProcessor1.postProcessEnvironment(env, app);</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;增强后&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : env.getPropertySources()) &#123;</span><br><span class="line">            System.out.println(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        RandomValuePropertySourceEnvironmentPostProcessor postProcessor2=<span class="keyword">new</span> <span class="title class_">RandomValuePropertySourceEnvironmentPostProcessor</span>(<span class="keyword">new</span> <span class="title class_">DeferredLog</span>());</span><br><span class="line">        postProcessor2.postProcessEnvironment(env, app);</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;增强后&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : env.getPropertySources()) &#123;</span><br><span class="line">            System.out.println(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;random.int&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;random.int&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;random.int&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>   <span class="title class_">ApplicationEnvironment</span> <span class="keyword">extends</span> <span class="title class_">StandardEnvironment</span> &#123;</span><br><span class="line">        ApplicationEnvironment() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetActiveProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetDefaultProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> ConfigurablePropertyResolver <span class="title function_">createPropertyResolver</span><span class="params">(MutablePropertySources propertySources)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ConfigurationPropertySources.createPropertyResolver(propertySources);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="演示第6步"><a href="#演示第6步" class="headerlink" title="演示第6步"></a>演示第6步</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.bind.Bindable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.bind.Binder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.source.ConfigurationPropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurablePropertyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.MutablePropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.StandardEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePropertySource;</span><br><span class="line"><span class="comment">//绑定 spring.main 到 SpringApplication 对象(*)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Step6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        SpringApplication app=<span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">        ApplicationEnvironment env=<span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>( <span class="string">&quot;step4&quot;</span>, <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;step4.properties&quot;</span>)));</span><br><span class="line">        env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>( <span class="string">&quot;step6&quot;</span>, <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;step6.properties&quot;</span>)));</span><br><span class="line">        System.out.println(app);</span><br><span class="line">        Binder.get(env).bind(<span class="string">&quot;spring.main&quot;</span>, Bindable.ofInstance(app));</span><br><span class="line">        System.out.println(app);</span><br><span class="line"><span class="comment">//        User user = Binder.get(env).bind(&quot;user&quot;, User.class).get();</span></span><br><span class="line"><span class="comment">//        System.out.println(user);</span></span><br><span class="line"><span class="comment">//        User user1=new User();</span></span><br><span class="line"><span class="comment">//        Binder.get(env).bind(&quot;user&quot;, Bindable.ofInstance(user1));</span></span><br><span class="line"><span class="comment">//        System.out.println(user1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String firstName;</span><br><span class="line">        <span class="keyword">private</span> String middleName;</span><br><span class="line">        <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> firstName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirstName</span><span class="params">(String firstName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getMiddleName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> middleName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMiddleName</span><span class="params">(String middleName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.middleName = middleName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> lastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;firstName=&#x27;&quot;</span> + firstName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, middleName=&#x27;&quot;</span> + middleName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, lastName=&#x27;&quot;</span> + lastName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>   <span class="title class_">ApplicationEnvironment</span> <span class="keyword">extends</span> <span class="title class_">StandardEnvironment</span> &#123;</span><br><span class="line">        ApplicationEnvironment() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetActiveProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetDefaultProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> ConfigurablePropertyResolver <span class="title function_">createPropertyResolver</span><span class="params">(MutablePropertySources propertySources)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ConfigurationPropertySources.createPropertyResolver(propertySources);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br><span class="line"><span class="attr">spring.main.lazy-initialization</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h3 id="演示第7步"><a href="#演示第7步" class="headerlink" title="演示第7步"></a>演示第7步</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.map.MapUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.Banner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ImageBanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ResourceBanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootVersion;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ansi.AnsiColor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ansi.AnsiOutput;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ansi.AnsiStyle;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.source.ConfigurationPropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurablePropertyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.MapPropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.MutablePropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.StandardEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//打印banner(*)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Step7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ApplicationEnvironment env=<span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        SpringApplicationBannerPrinter printer=<span class="keyword">new</span> <span class="title class_">SpringApplicationBannerPrinter</span>(<span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>(),<span class="keyword">new</span> <span class="title class_">SpringBootBanner</span>());</span><br><span class="line">        <span class="comment">//测试文字banner</span></span><br><span class="line">        env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">MapPropertySource</span>(<span class="string">&quot;custom&quot;</span>, MapUtil.of(<span class="string">&quot;spring.banner.location&quot;</span>,<span class="string">&quot;banner.txt&quot;</span>)));</span><br><span class="line">        <span class="comment">//测试图片banner</span></span><br><span class="line"><span class="comment">//        env.getPropertySources().addLast(new MapPropertySource(&quot;custom&quot;, MapUtil.of(&quot;spring.banner.image.location&quot;,&quot;banner.png&quot;)));</span></span><br><span class="line">        <span class="comment">//版本号信息</span></span><br><span class="line">        System.out.println(SpringBootVersion.getVersion());</span><br><span class="line">        printer.print(env,Step7.class,System.out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>   <span class="title class_">ApplicationEnvironment</span> <span class="keyword">extends</span> <span class="title class_">StandardEnvironment</span> &#123;</span><br><span class="line">        ApplicationEnvironment() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetActiveProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doGetDefaultProfilesProperty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> ConfigurablePropertyResolver <span class="title function_">createPropertyResolver</span><span class="params">(MutablePropertySources propertySources)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ConfigurationPropertySources.createPropertyResolver(propertySources);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">  <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">SpringApplicationBannerPrinter</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANNER_LOCATION_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.banner.location&quot;</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANNER_IMAGE_LOCATION_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.banner.image.location&quot;</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_BANNER_LOCATION</span> <span class="operator">=</span> <span class="string">&quot;banner.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> String[] IMAGE_EXTENSION = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Banner</span> <span class="variable">DEFAULT_BANNER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringBootBanner</span>();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ResourceLoader resourceLoader;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Banner fallbackBanner;</span><br><span class="line"></span><br><span class="line">        SpringApplicationBannerPrinter(ResourceLoader resourceLoader, Banner fallbackBanner) &#123;</span><br><span class="line">            <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">            <span class="built_in">this</span>.fallbackBanner = fallbackBanner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Banner <span class="title function_">print</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, Log logger)</span> &#123;</span><br><span class="line">            <span class="type">Banner</span> <span class="variable">banner</span> <span class="operator">=</span> <span class="built_in">this</span>.getBanner(environment);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                logger.info(<span class="built_in">this</span>.createStringFromBanner(banner, environment, sourceClass));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException var6) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Failed to create String for banner&quot;</span>, var6);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span>  <span class="title class_">SpringApplicationBannerPrinter</span>.PrintedBanner(banner, sourceClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Banner <span class="title function_">print</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, PrintStream out)</span> &#123;</span><br><span class="line">            <span class="type">Banner</span> <span class="variable">banner</span> <span class="operator">=</span> <span class="built_in">this</span>.getBanner(environment);</span><br><span class="line">            banner.printBanner(environment, sourceClass, out);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBannerPrinter</span>.PrintedBanner(banner, sourceClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Banner <span class="title function_">getBanner</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">            SpringApplicationBannerPrinter.<span class="type">Banners</span> <span class="variable">banners</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">SpringApplicationBannerPrinter</span>.Banners();</span><br><span class="line">            banners.addIfNotNull(<span class="built_in">this</span>.getImageBanner(environment));</span><br><span class="line">            banners.addIfNotNull(<span class="built_in">this</span>.getTextBanner(environment));</span><br><span class="line">            <span class="keyword">if</span> (banners.hasAtLeastOneBanner()) &#123;</span><br><span class="line">                <span class="keyword">return</span> banners;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.fallbackBanner != <span class="literal">null</span> ? <span class="built_in">this</span>.fallbackBanner : DEFAULT_BANNER;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Banner <span class="title function_">getTextBanner</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;spring.banner.location&quot;</span>, <span class="string">&quot;banner.txt&quot;</span>);</span><br><span class="line">            <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceLoader.getResource(location);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (resource.exists() &amp;&amp; !resource.getURL().toExternalForm().contains(<span class="string">&quot;liquibase-core&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResourceBanner</span>(resource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var5) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Banner <span class="title function_">getImageBanner</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;spring.banner.image.location&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(location)) &#123;</span><br><span class="line">                <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceLoader.getResource(location);</span><br><span class="line">                <span class="keyword">return</span> resource.exists() ? <span class="keyword">new</span> <span class="title class_">ImageBanner</span>(resource) : <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String[] var3 = IMAGE_EXTENSION;</span><br><span class="line">                <span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> var3.length;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> var3[var5];</span><br><span class="line">                    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceLoader.getResource(<span class="string">&quot;banner.&quot;</span> + ext);</span><br><span class="line">                    <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ImageBanner</span>(resource);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String <span class="title function_">createStringFromBanner</span><span class="params">(Banner banner, Environment environment, Class&lt;?&gt; mainApplicationClass)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            banner.printBanner(environment, mainApplicationClass, <span class="keyword">new</span> <span class="title class_">PrintStream</span>(baos));</span><br><span class="line">            <span class="type">String</span> <span class="variable">charset</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;spring.banner.charset&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> baos.toString(charset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PrintedBanner</span> <span class="keyword">implements</span> <span class="title class_">Banner</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> Banner banner;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; sourceClass;</span><br><span class="line"></span><br><span class="line">            PrintedBanner(Banner banner, Class&lt;?&gt; sourceClass) &#123;</span><br><span class="line">                <span class="built_in">this</span>.banner = banner;</span><br><span class="line">                <span class="built_in">this</span>.sourceClass = sourceClass;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printBanner</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, PrintStream out)</span> &#123;</span><br><span class="line">                sourceClass = sourceClass != <span class="literal">null</span> ? sourceClass : <span class="built_in">this</span>.sourceClass;</span><br><span class="line">                <span class="built_in">this</span>.banner.printBanner(environment, sourceClass, out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Banners</span> <span class="keyword">implements</span> <span class="title class_">Banner</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Banner&gt; banners;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="title function_">Banners</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.banners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">addIfNotNull</span><span class="params">(Banner banner)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (banner != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.banners.add(banner);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="title function_">hasAtLeastOneBanner</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> !<span class="built_in">this</span>.banners.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printBanner</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, PrintStream out)</span> &#123;</span><br><span class="line">                <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.banners.iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">                    <span class="type">Banner</span> <span class="variable">banner</span> <span class="operator">=</span> (Banner)var4.next();</span><br><span class="line">                    banner.printBanner(environment, sourceClass, out);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SpringBootBanner</span> <span class="keyword">implements</span> <span class="title class_">Banner</span> &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] BANNER = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;  .   ____          _            __ _ _&quot;</span>, <span class="string">&quot; /\\\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\&quot;</span>, <span class="string">&quot;( ( )\\___ | &#x27;_ | &#x27;_| | &#x27;_ \\/ _` | \\ \\ \\ \\&quot;</span>, <span class="string">&quot; \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )&quot;</span>, <span class="string">&quot;  &#x27;  |____| .__|_| |_|_| |_\\__, | / / / /&quot;</span>, <span class="string">&quot; =========|_|==============|___/=/_/_/_/&quot;</span>&#125;;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_BOOT</span> <span class="operator">=</span> <span class="string">&quot; :: Spring Boot :: &quot;</span>;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STRAP_LINE_SIZE</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">       SpringBootBanner() &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printBanner</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, PrintStream printStream)</span> &#123;</span><br><span class="line">           String[] var4 = BANNER;</span><br><span class="line">           <span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> var4.length;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="number">0</span>; var6 &lt; var5; ++var6) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> var4[var6];</span><br><span class="line">               printStream.println(line);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> SpringBootVersion.getVersion();</span><br><span class="line">           version = version != <span class="literal">null</span> ? <span class="string">&quot; (v&quot;</span> + version + <span class="string">&quot;)&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">           <span class="type">StringBuilder</span> <span class="variable">padding</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span> (padding.length() &lt; <span class="number">42</span> - (version.length() + <span class="string">&quot; :: Spring Boot :: &quot;</span>.length())) &#123;</span><br><span class="line">               padding.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           printStream.println(AnsiOutput.toString(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;AnsiColor.GREEN, <span class="string">&quot; :: Spring Boot :: &quot;</span>, AnsiColor.DEFAULT, padding.toString(), AnsiStyle.FAINT, version&#125;));</span><br><span class="line">           printStream.println();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringApplication</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动配置</title>
    <url>/2024/07/12/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="通过-Import-Configuration"><a href="#通过-Import-Configuration" class="headerlink" title="通过@Import&amp;@Configuration"></a>通过@Import&amp;@Configuration</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Import(&#123;Config1.class,Config2.class&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">Config1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean2 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="自己实现ImportSelector接口"><a href="#自己实现ImportSelector接口" class="headerlink" title="自己实现ImportSelector接口"></a>自己实现ImportSelector接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Import(&#123;MyImportSelector.class&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Bean1.class.getName(),Bean2.class.getName()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">Config1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean2 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="通过配置文件spring-factories"><a href="#通过配置文件spring-factories" class="headerlink" title="通过配置文件spring.factories"></a>通过配置文件spring.factories</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.SpringFactoriesLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="comment">//设置BeanDefinition不能重写</span></span><br><span class="line">        context.setAllowBeanDefinitionOverriding(<span class="literal">false</span>);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(context.getBean(Bean1.class));</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span> <span class="comment">//本项目配置类</span></span><br><span class="line">    <span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;本项目&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DeferredImportSelector 可以让本项目的优先级大于第三方的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            List&lt;String&gt; loadFactoryNames = SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;==============&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String name : loadFactoryNames) &#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;String&gt; factoryNames = SpringFactoriesLoader.loadFactoryNames(MyImportSelector.class, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> factoryNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">     <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">Config1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;第三方&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  Bean2 <span class="title function_">bean2</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bean1&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bean2&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line"># 内部类用$</span><br><span class="line">com.github.ed.test.test5.Test$MyImportSelector=\</span><br><span class="line">com.github.ed.test.test5.Test$Config1,\</span><br><span class="line">com.github.ed.test.test5.Test$Config2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.github.ed.test.test5.TestAopAutoConfiguration$Config1,\</span><br><span class="line">com.github.ed.test.test5.TestAopAutoConfiguration$Config2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>路径为resources下的<strong>META-INF&#x2F;spring.factories</strong><code>public static final String FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</code></li>
<li>如果本项目beanName与第三方beanName相同 默认是第三方的优先级高 实现<code>DeferredImportSelector</code>接口让本项目优先级高</li>
<li><code>@ConditionalOnMissingBean</code>如果没有相同名字的bean那么使用当前这个bean 有就不用</li>
</ul>
<h1 id="自定义条件装配"><a href="#自定义条件装配" class="headerlink" title="自定义条件装配"></a>自定义条件装配</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.SimpleCommandLinePropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.StandardEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAopAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericApplicationContext context=<span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        StandardEnvironment env=<span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">        env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(</span><br><span class="line">                <span class="string">&quot;--spring.aop.auto=true&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--spring.datasource.url=jdbc:mysql://localhost:3306/spikes&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--spring.datasource.username=root&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--spring.datasource.password=&quot;</span></span><br><span class="line">        ));</span><br><span class="line">        context.setEnvironment(env);</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> context.getBeanDefinition(name).getResourceDescription();</span><br><span class="line">            <span class="keyword">if</span>(description!=<span class="literal">null</span>)</span><br><span class="line">                System.out.println(name+<span class="string">&quot;来源：&quot;</span>+description);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@EnableAutoConfiguration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Conditional(MyConditional1.class)</span></span><br><span class="line">    <span class="meta">@interface</span> ConditionalOnClass&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span> ;</span><br><span class="line">        String <span class="title function_">className</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyConditional1</span> <span class="keyword">implements</span> <span class="title class_">Condition</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; annotationAttributes = metadata.getAnnotationAttributes(ConditionalOnClass.class.getName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> (String)annotationAttributes .get(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> (<span class="type">boolean</span>) annotationAttributes.get(<span class="string">&quot;exists&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">present</span> <span class="operator">=</span> ClassUtils.isPresent(className, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> exists == present;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(exists = false,className = &quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">static</span>   <span class="keyword">class</span> <span class="title class_">Config1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(exists = true,className = &quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;)</span></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config2</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bean1&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bean2&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Srping</tag>
        <tag>EnableAutoConfiguration</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat内嵌容器</title>
    <url>/2024/07/12/Tomcat%E5%86%85%E5%B5%8C%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Tomcat结构图"><a href="#Tomcat结构图" class="headerlink" title="Tomcat结构图"></a>Tomcat结构图</h1><img src="26c9907ea4ce46a8505bc5a8b81c914e.png" alt="截图" style="zoom:50%;" />

<h1 id="Tomcat内嵌容器"><a href="#Tomcat内嵌容器" class="headerlink" title="Tomcat内嵌容器"></a>Tomcat内嵌容器</h1><ol>
<li>创建 Tomcat 对象</li>
<li>创建项目文件来，即docBase文件夹</li>
<li>创建Tomcat 项目，在Tomcat 中称为 Context</li>
<li>编程添加 Servlet</li>
<li>启动 Tomcat</li>
<li>创建连接器,设置监听端口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test3.test4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.servlets.DefaultServlet;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.startup.Tomcat;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11Nio2Protocol;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContainerInitializer;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTomcat</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line"><span class="comment">//        1.创建 Tomcat 对象</span></span><br><span class="line">        Tomcat tomcat=<span class="keyword">new</span> <span class="title class_">Tomcat</span>();</span><br><span class="line">        tomcat.setBaseDir(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line"><span class="comment">//        2.创建项目文件来，即docBase文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">docBase</span> <span class="operator">=</span> Files.createTempDirectory(<span class="string">&quot;boot.&quot;</span>).toFile();</span><br><span class="line">        docBase.deleteOnExit();</span><br><span class="line"><span class="comment">//        3.创建Tomcat 项目，在Tomcat 中称为 Context</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> tomcat.addContext(<span class="string">&quot;&quot;</span>, docBase.getAbsolutePath());</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">springContext</span> <span class="operator">=</span> getApplicationContext();</span><br><span class="line"><span class="comment">//        4.编程添加 Servlet</span></span><br><span class="line">        context.addServletContainerInitializer(<span class="keyword">new</span> <span class="title class_">ServletContainerInitializer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; cs, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">                ctx.addServlet(<span class="string">&quot;aaa&quot;</span>,<span class="keyword">new</span> <span class="title class_">DefaultServlet</span>()).addMapping(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line"><span class="comment">//                DispatcherServlet dispatcherServlet = springContext.getBean(DispatcherServlet.class);</span></span><br><span class="line"><span class="comment">//                ctx.addServlet(&quot;dispatcherServlet&quot;,dispatcherServlet).addMapping(&quot;/&quot;);</span></span><br><span class="line">                <span class="keyword">for</span> (ServletRegistrationBean registrationBean :springContext.getBeansOfType(ServletRegistrationBean.class).values()) &#123;</span><br><span class="line">                    registrationBean.onStartup(ctx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Collections.emptySet());</span><br><span class="line"><span class="comment">//        5.启动 Tomcat</span></span><br><span class="line">        tomcat.start();</span><br><span class="line"><span class="comment">//        6.创建连接器,设置监听端口</span></span><br><span class="line">        <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="keyword">new</span> <span class="title class_">Http11Nio2Protocol</span>());</span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        tomcat.setConnector(connector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> WebApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">       AnnotationConfigWebApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">       context.register(Config.class);</span><br><span class="line">       context.refresh();</span><br><span class="line">       <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">dispatcherServletRegistrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet,<span class="string">&quot;/&quot;</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">requestMappingHandlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">RequestMappingHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">            adapter.setMessageConverters(Collections.singletonList(<span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>()));</span><br><span class="line">            <span class="keyword">return</span>  adapter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Controller</span></span><br><span class="line">        <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Controller1</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@GetMapping(&quot;/hello2&quot;)</span></span><br><span class="line">            <span class="meta">@ResponseBody</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;hello2&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>github图床搭建</title>
    <url>/2024/07/14/github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="github图床搭建"><a href="#github图床搭建" class="headerlink" title="github图床搭建"></a>github图床搭建</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/17211073156430575715d3062a6464862a4a5fdf444cb.png" alt="17211073156430575715d3062a6464862a4a5fdf444cb.png" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/1721107744695cdd984ff7717316a8fbe87d4001dd41c.png" alt="1721107744695cdd984ff7717316a8fbe87d4001dd41c.png" style="zoom:50%;" />

<h2 id="生成令牌"><a href="#生成令牌" class="headerlink" title="生成令牌"></a>生成令牌</h2><img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/1721107389608ec7ba5e1e66e95e7442a3ed0287806dd.png" alt="1721107389608ec7ba5e1e66e95e7442a3ed0287806dd.png" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/172110746569820b111ae4453458bc878a723f53c1b98.png" alt="172110746569820b111ae4453458bc878a723f53c1b98.png" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/1721107551703b0d667fa6400da74f81e74d27dd48461.png" alt="1721107551703b0d667fa6400da74f81e74d27dd48461.png" style="zoom:50%;" />

<br/>

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/1721107570696078e025aee14c9ce71751520896095a5.png" alt="1721107570696078e025aee14c9ce71751520896095a5.png" style="zoom:50%;" />

<ul>
<li>拉到最后点击创建</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/17211077866118a5e703ae84010bf49f1981eebb4d18a.png" alt="17211077866118a5e703ae84010bf49f1981eebb4d18a.png" style="zoom:50%;" />

<h1 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h1><ul>
<li><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/">PicGo下载地址</a></li>
<li>选择【图床设置】-&gt;【Github】</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/172110725464201097e6925e9cb042b4aebb6d965e24a.png" alt="172110725464201097e6925e9cb042b4aebb6d965e24a.png" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/1721107187645449d9f9519e1cb7a41eea4a871abd6bc.png" alt="1721107187645449d9f9519e1cb7a41eea4a871abd6bc.png" style="zoom:50%;" />

<ol>
<li><p>设置仓库名&#x3D;用户名+仓库名</p>
</li>
<li><p>设定分支名： 仓库在哪个分支里，就填哪个分支。</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/1721107125642ad5e84fb2b326dd52f57dfd4db82c3eb.png" alt="1721107125642ad5e84fb2b326dd52f57dfd4db82c3eb.png" style="zoom:50%;" /></li>
<li><p>设定Token：刚刚创建的token,将其填进去即可。</p>
</li>
<li><p>设置存储路径 统一设置成img&#x2F;</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/17211075896962e63214d2006fe2cc4698270d2d33979.png" alt="17211075896962e63214d2006fe2cc4698270d2d33979.png" style="zoom:50%;" /></li>
<li><p>设置自定义域名。这个是比较关键的。我们可以用一个免费的加速域名作为我们自定义域名。</p>
<p>设置自定义域名。这个是比较关键的。我们可以用一个免费的加速域名作为我们自定义域名。</p>
<p>那么你所设置的就应当为<a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a> +你的账户名+你的仓库名@你的分支名。比如，我上面的就是<a href="https://cdn.jsdelivr.net/gh/jianxiangwudi/MyPic@img">https://cdn.jsdelivr.net/gh/jianxiangwudi/MyPic@img</a> 按照需要改成你自己的。</p>
<p>需要注意的是，这里一定要设置成@</p>
</li>
</ol>
<h1 id="设置Typora实现自动上传"><a href="#设置Typora实现自动上传" class="headerlink" title="设置Typora实现自动上传"></a>设置Typora实现自动上传</h1><ol>
<li><p>点击【文件】-&gt;【偏好设置】-&gt;【图像】</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/17211070656435f03cc695de226124dec982b16e8fe54.png" alt="17211070656435f03cc695de226124dec982b16e8fe54.png" style="zoom:50%;" /></li>
<li><p>注意 可能会自动上传失败 要自己手动用PicGo上传</p>
</li>
<li><p><a href="https://typoraio.cn/#">Typora下载地址</a></p>
</li>
<li><p><a href="https://blog.csdn.net/y3332664073/article/details/138497340">Typora激活教程</a></p>
</li>
</ol>
<p><a href="https://xugaoyi.com/pages/a5f73af5185fdf0a/">本文参考链接</a></p>
]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>cglib原理</title>
    <url>/2024/07/15/cglib%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="CGLIB代理原理-MethodProxy"><a href="#CGLIB代理原理-MethodProxy" class="headerlink" title="CGLIB代理原理-MethodProxy"></a>CGLIB代理原理-MethodProxy</h1><h2 id="Target-目标类"><a href="#Target-目标类" class="headerlink" title="Target-目标类"></a>Target-目标类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test8;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save(int)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">long</span> l)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save(long)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Prxoy-代理类"><a href="#Prxoy-代理类" class="headerlink" title="Prxoy-代理类"></a>Prxoy-代理类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prxoy</span> <span class="keyword">extends</span> <span class="title class_">Target</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MethodInterceptor methodInterceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Prxoy</span><span class="params">(MethodInterceptor methodInterceptor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodInterceptor=methodInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Method save0;</span><br><span class="line">    <span class="keyword">static</span> Method save1;</span><br><span class="line">    <span class="keyword">static</span> Method save2;</span><br><span class="line">    <span class="keyword">static</span> MethodProxy save0Super;</span><br><span class="line">    <span class="keyword">static</span> MethodProxy save1Super;</span><br><span class="line">    <span class="keyword">static</span> MethodProxy save2Super;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            save0 =Target.class.getMethod(<span class="string">&quot;save&quot;</span>);</span><br><span class="line">            save1 =Target.class.getMethod(<span class="string">&quot;save&quot;</span>,<span class="type">int</span>.class);</span><br><span class="line">            save2 =Target.class.getMethod(<span class="string">&quot;save&quot;</span>,<span class="type">long</span>.class);</span><br><span class="line">            save0Super =MethodProxy.create(Target.class,Prxoy.class,<span class="string">&quot;()V&quot;</span>,<span class="string">&quot;save&quot;</span>,<span class="string">&quot;saveSuper&quot;</span>);</span><br><span class="line">            save1Super =MethodProxy.create(Target.class,Prxoy.class,<span class="string">&quot;(I)V&quot;</span>,<span class="string">&quot;save&quot;</span>,<span class="string">&quot;saveSuper&quot;</span>);</span><br><span class="line">            save2Super =MethodProxy.create(Target.class,Prxoy.class,<span class="string">&quot;(J)V&quot;</span>,<span class="string">&quot;save&quot;</span>,<span class="string">&quot;saveSuper&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveSuper</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveSuper</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.save(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveSuper</span><span class="params">(<span class="type">long</span> j)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.save(j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           methodInterceptor.intercept(<span class="built_in">this</span>, save0, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>], save0Super);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        super.save();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodInterceptor.intercept(<span class="built_in">this</span>, save1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;i&#125;, save1Super);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">long</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodInterceptor.intercept(<span class="built_in">this</span>, save2, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;j&#125;, save2Super);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A14</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Target target=<span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">        Prxoy prxoy=<span class="keyword">new</span>  <span class="title class_">Prxoy</span>((p, method, args1, methodProxy) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line"><span class="comment">//            Object result = method.invoke(target, args1);</span></span><br><span class="line"><span class="comment">//            Object result = methodProxy.invoke(target, args1);//内部无反射 结合目标方法</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invokeSuper(p, args1);<span class="comment">//内部无反射 结合代理方法</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line">        prxoy.save();</span><br><span class="line">        prxoy.save(<span class="number">1</span>);</span><br><span class="line">        prxoy.save(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(A14.class.getName());</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="MethodProxy原理"><a href="#MethodProxy原理" class="headerlink" title="MethodProxy原理"></a>MethodProxy原理</h1><p>1.用arthas 查看,已经生成了两个代理类，一个目标类的FastClass代理类，一个代理类的FastClass代理类</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/pic-resource@master/img/20240716083006.png" alt="20240716083006.png" style="zoom:50%;" />

<ol start="2">
<li><code>jad com.github.ed.test.test8.Prxoy$$FastClassByCGLIB$$a601950d </code>查看<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.ed.test.test8.Prxoy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.core.Signature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.reflect.FastClass;</span><br><span class="line"><span class="comment">//代理类的代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prxoy$$FastClassByCGLIB$$a601950d</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">FastClass</span> &#123;</span><br><span class="line">  <span class="comment">//根据方法索引调用方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="type">int</span> n, Object object, Object[] objectArray)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        <span class="type">Prxoy</span> <span class="variable">prxoy</span> <span class="operator">=</span> (Prxoy)object;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                    prxoy.save(((Number)objectArray[<span class="number">0</span>]).longValue());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                    prxoy.save();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                    prxoy.save(((Number)objectArray[<span class="number">0</span>]).intValue());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                    prxoy.saveSuper(((Number)objectArray[<span class="number">0</span>]).intValue());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                    prxoy.saveSuper();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">                    prxoy.saveSuper(((Number)objectArray[<span class="number">0</span>]).longValue());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(prxoy.equals(objectArray[<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> prxoy.toString();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(prxoy.hashCode());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvocationTargetException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Prxoy$$FastClassByCGLIB$$a601950d(Class clazz) &#123;</span><br><span class="line">        <span class="built_in">super</span>(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">newInstance</span><span class="params">(<span class="type">int</span> n, Object[] objectArray)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Prxoy</span>((MethodInterceptor)objectArray[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvocationTargetException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Class[] classArray)</span> &#123;</span><br><span class="line">        Class[] classArray2 = classArray;</span><br><span class="line">        <span class="keyword">switch</span> (classArray.length) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">if</span> (!classArray2[<span class="number">0</span>].getName().equals(<span class="string">&quot;org.springframework.cglib.proxy.MethodInterceptor&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(String string, Class[] classArray)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string2</span> <span class="operator">=</span> string;</span><br><span class="line">        Class[] classArray2 = classArray;</span><br><span class="line">        block0 : <span class="keyword">switch</span> (string2.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1776922004</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;toString&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1295482945</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;equals&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                        classArray2 = classArray2;</span><br><span class="line">                        <span class="keyword">if</span> (!classArray2[<span class="number">0</span>].getName().equals(<span class="string">&quot;java.lang.Object&quot;</span>)) <span class="keyword">break</span> block0;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3522941</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;save&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                        classArray2 = classArray2;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">string3</span> <span class="operator">=</span> classArray2[<span class="number">0</span>].getName();</span><br><span class="line">                        <span class="keyword">switch</span> (string3.hashCode()) &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">104431</span>: &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!string3.equals(<span class="string">&quot;int&quot;</span>)) <span class="keyword">break</span> block0;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3327612</span>: &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!string3.equals(<span class="string">&quot;long&quot;</span>)) <span class="keyword">break</span> block0;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span> block0;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">147696667</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;hashCode&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">173089790</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;saveSuper&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                        classArray2 = classArray2;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">string4</span> <span class="operator">=</span> classArray2[<span class="number">0</span>].getName();</span><br><span class="line">                        <span class="keyword">switch</span> (string4.hashCode()) &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">104431</span>: &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!string4.equals(<span class="string">&quot;int&quot;</span>)) <span class="keyword">break</span> block0;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3327612</span>: &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!string4.equals(<span class="string">&quot;long&quot;</span>)) <span class="keyword">break</span> block0;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span> block0;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//根据方法签名获取方法索引</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Signature signature)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> ((Object)signature).toString();</span><br><span class="line">        <span class="keyword">switch</span> (string.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">2073951957</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;save(I)V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">2073950996</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;save(J)V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1737748809</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;saveSuper()V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1826985398</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1872760024</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;save()V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1913648695</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1964391212</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;saveSuper(I)V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1964392173</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;saveSuper(J)V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1984935277</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;hashCode()I&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code> jad com.github.ed.test.test8.Target$$FastClassByCGLIB$$20120544</code>查看<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.ed.test.test8.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.core.Signature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.reflect.FastClass;</span><br><span class="line"><span class="comment">//目标类的代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target$$FastClassByCGLIB$$20120544</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">FastClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="type">int</span> n, Object object, Object[] objectArray)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> (Target)object;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                    target.save(((Number)objectArray[<span class="number">0</span>]).longValue());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                    target.save(((Number)objectArray[<span class="number">0</span>]).intValue());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                    target.save();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(target.equals(objectArray[<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> target.toString();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(target.hashCode());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvocationTargetException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Target$$FastClassByCGLIB$$<span class="number">20120544</span>(Class clazz) &#123;</span><br><span class="line">        <span class="built_in">super</span>(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">newInstance</span><span class="params">(<span class="type">int</span> n, Object[] objectArray)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvocationTargetException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Class[] classArray)</span> &#123;</span><br><span class="line">        Class[] classArray2 = classArray;</span><br><span class="line">        <span class="keyword">switch</span> (classArray.length) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(String string, Class[] classArray)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string2</span> <span class="operator">=</span> string;</span><br><span class="line">        Class[] classArray2 = classArray;</span><br><span class="line">        block0 : <span class="keyword">switch</span> (string2.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1776922004</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;toString&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1295482945</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;equals&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                        classArray2 = classArray2;</span><br><span class="line">                        <span class="keyword">if</span> (!classArray2[<span class="number">0</span>].getName().equals(<span class="string">&quot;java.lang.Object&quot;</span>)) <span class="keyword">break</span> block0;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3522941</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;save&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                        classArray2 = classArray2;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">string3</span> <span class="operator">=</span> classArray2[<span class="number">0</span>].getName();</span><br><span class="line">                        <span class="keyword">switch</span> (string3.hashCode()) &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">104431</span>: &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!string3.equals(<span class="string">&quot;int&quot;</span>)) <span class="keyword">break</span> block0;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3327612</span>: &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!string3.equals(<span class="string">&quot;long&quot;</span>)) <span class="keyword">break</span> block0;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span> block0;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">147696667</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string2.equals(<span class="string">&quot;hashCode&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                classArray2 = classArray2;</span><br><span class="line">                <span class="keyword">switch</span> (classArray2.length) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Signature signature)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> ((Object)signature).toString();</span><br><span class="line">        <span class="keyword">switch</span> (string.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">2073951957</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;save(I)V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">2073950996</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;save(J)V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1826985398</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1872760024</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;save()V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1913648695</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1984935277</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;hashCode()I&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringAop</tag>
        <tag>CGLIB</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>vite配置环境变量</title>
    <url>/2024/07/19/vite%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<ol>
<li><p>创建环境变量：在项目的根目录创建<code>.env.development</code> 和<code> .env.prodution</code>两个文件 分别为开发环境和生产环境(必须以<code>.env.</code>开头)</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/98c71f0207d15c2db75718688596c89b.2h877rjqi8.webp" alt="98c71f0207d15c2db75718688596c89b" style="zoom:50%;" /></li>
<li><p>在环境变量文件分别写对应环境变量，变量必须以<code>VITE_</code>开头</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/a1fa272273b5e55faf0e9961587cad02.esejplcmi.webp" alt="a1fa272273b5e55faf0e9961587cad02" style="zoom:50%;" /></li>
<li><p>开发环境配置和访问环境变量</p>
</li>
</ol>
<ul>
<li><p>访问变量前 需要在package.json 的dev中配置mode 这个名字跟<code>.env.</code>后面的一致，若名字是<code>.env.development</code>则无需配置</p>
 <img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/96f2d36fd86ba26487a87c4bbbae452e.ic0hfei3n.webp" alt="96f2d36fd86ba26487a87c4bbbae452e" style="zoom:50%;" /></li>
</ul>
<br/>

<ul>
<li>使用import.meta.env+文件中定义的名字访问</li>
</ul>
<br/>

   <img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/8f7404c2b08c7df4c900674d490e892b.4xufmoqzcr.webp" alt="8f7404c2b08c7df4c900674d490e892b" style="zoom:50%;" />

<ul>
<li><p>启动本地环境，访问对应页面时，会打印以下信息</p>
 <img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/b883e88311ad34f06bc28c516e736623.361grs7pux.webp" alt="b883e88311ad34f06bc28c516e736623" style="zoom:50%;" /></li>
</ul>
<br/>

<ul>
<li><p>在vite.config.ts中访问环境变量：使用vite的loadEnv插件，需要将vite配置包裹在一个函数中，使用结构将当前mode模式拿到，如下所示：</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/fff152cfd7477035d61288afcc3135f4.5xaizutw33.webp" alt="fff152cfd7477035d61288afcc3135f4" style="zoom:50%;" /></li>
</ul>
<ol start="4">
<li>在生产环境访问环境变量</li>
</ol>
<ul>
<li><p>打包项目，执行npm run build，生成了dist文件夹；</p>
</li>
<li><p>需要全局安装插件，npm install http-server -g，在dist文件夹打开终端，输入http-server -p 9091，即可启动一个服务查看打包后的项目</p>
</li>
<li><p>访问<code>127.0.0.1:9091</code>,可以看到控制台打印的是生产的环境变量，说明生效了</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/8aeb78222cc890a3707f9a44b3a372d4.1vyjlgpw6f.webp" alt="8aeb78222cc890a3707f9a44b3a372d4" style="zoom:50%;" /></li>
</ul>
]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VITE</tag>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>事件监听器与发布器</title>
    <url>/2024/07/13/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8%E4%B8%8E%E5%8F%91%E5%B8%83%E5%99%A8/</url>
    <content><![CDATA[<h1 id="实现ApplicationListener接口"><a href="#实现ApplicationListener接口" class="headerlink" title="实现ApplicationListener接口"></a>实现ApplicationListener接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Test1.class);</span><br><span class="line">        context.getBean(MyService.class).doSome();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;主业务&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MyEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span>  <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;MyEvent&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SmsService.class);</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送短信&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;MyEvent&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SmsService.class);</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="EventListener注解"><a href="#EventListener注解" class="headerlink" title="@EventListener注解"></a>@EventListener注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ApplicationEventMulticaster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.SimpleApplicationEventMulticaster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Test2.class);</span><br><span class="line">        context.getBean(MyService.class).doBusiness();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;主业务&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MyEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span>  <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SmsService.class);</span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送短信&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SmsService.class);</span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">threadPoolTaskExecutor</span><span class="params">()</span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor=<span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">3</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加线程异步处理</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationEventMulticaster <span class="title function_">applicationEventMulticaster</span><span class="params">(ThreadPoolTaskExecutor threadPoolTaskExecutor)</span>&#123;</span><br><span class="line">        SimpleApplicationEventMulticaster multicaster=<span class="keyword">new</span> <span class="title class_">SimpleApplicationEventMulticaster</span>();</span><br><span class="line">        multicaster.setTaskExecutor(threadPoolTaskExecutor);</span><br><span class="line">        <span class="keyword">return</span> multicaster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="自定义注解解析"><a href="#自定义注解解析" class="headerlink" title="自定义注解解析"></a>自定义注解解析</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.SmartInitializingSingleton;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义监听器注解类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Test3.class);</span><br><span class="line">        context.getBean(MyService.class).doBusiness();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;主业务&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MyEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SmsService.class);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="meta">@MyListener</span></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送短信&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(EmailService.class);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="meta">@MyListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> SmartInitializingSingleton <span class="title function_">smartInitializingSingleton</span><span class="params">(ConfigurableApplicationContext context)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(beanDefinitionName);</span><br><span class="line">                    <span class="keyword">for</span> (Method method : bean.getClass().getMethods()) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(method.isAnnotationPresent(MyListener.class))&#123;</span><br><span class="line">                            <span class="type">ApplicationListener</span> <span class="variable">applicationListener</span> <span class="operator">=</span> event -&gt; &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="comment">//监听器需要的事件类型</span></span><br><span class="line">                                    Class&lt;?&gt; eventType = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">                                    <span class="keyword">if</span> (eventType.isAssignableFrom(event.getClass())) &#123;</span><br><span class="line">                                        method.invoke(bean, event);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;;</span><br><span class="line">                            context.addApplicationListener(applicationListener);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> MyListener &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="ApplicationEventMulticaster"><a href="#ApplicationEventMulticaster" class="headerlink" title="ApplicationEventMulticaster"></a>ApplicationEventMulticaster</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test6;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ApplicationEventMulticaster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.GenericApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.ResolvableType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Test4.class);</span><br><span class="line">        context.getBean(MyService.class).doBusiness();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;主业务&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MyEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;MyEvent&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SmsService.class);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送短信&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;MyEvent&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(EmailService.class);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> ApplicationEventMulticaster <span class="title function_">applicationEventMulticaster</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractApplicationEventMulticaster</span>() &#123;</span><br><span class="line">                <span class="keyword">private</span> List&lt;GenericApplicationListener&gt; listeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListenerBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">                    <span class="type">ApplicationListener</span> <span class="variable">listener</span> <span class="operator">=</span> context.getBean(name, ApplicationListener.class);</span><br><span class="line">                    <span class="comment">//获取该监听器支持的事件类型</span></span><br><span class="line">                    <span class="type">ResolvableType</span> <span class="variable">type</span> <span class="operator">=</span> ResolvableType.forClass(listener.getClass()).getInterfaces()[<span class="number">0</span>].getGeneric();</span><br><span class="line">                    <span class="comment">//将原始的listener封装为支持事件类型检查的listener</span></span><br><span class="line">                    <span class="type">GenericApplicationListener</span> <span class="variable">genericApplicationListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationListener</span>() &#123;</span><br><span class="line">                        <span class="comment">//是否支持某个事件类型</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsEventType</span><span class="params">(ResolvableType eventType)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> type.isAssignableFrom(eventType);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">                            listener.onApplicationEvent(event);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    listeners.add(genericApplicationListener);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event, ResolvableType eventType)</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (GenericApplicationListener listener : listeners) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (listener.supportsEventType(ResolvableType.forClass(event.getClass()))) &#123;</span><br><span class="line">                            listener.onApplicationEvent(event);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationEventMulticaster</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventMulticaster</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListenerBean</span><span class="params">(String listenerBeanName)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListenerBean</span><span class="params">(String listenerBeanName)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListeners</span><span class="params">(Predicate&lt;ApplicationListener&lt;?&gt;&gt; predicate)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListenerBeans</span><span class="params">(Predicate&lt;String&gt; predicate)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAllListeners</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event, ResolvableType eventType)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AopProxyUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ApplicationEventMulticaster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.GenericApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.ResolvableType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Test5.class);</span><br><span class="line">        context.getBean(MyService.class).doBusiness();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;主业务&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MyEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsService</span>  &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SmsService.class);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送短信&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService</span>  &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(EmailService.class);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> ApplicationEventMulticaster <span class="title function_">applicationEventMulticaster</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EmailService</span>.AbstractApplicationEventMulticaster() &#123;</span><br><span class="line">                <span class="keyword">private</span> List&lt;GenericApplicationListener&gt; listeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line">                        listeners.add((GenericApplicationListener) listener);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListenerBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">                    <span class="type">ApplicationListener</span> <span class="variable">listener</span> <span class="operator">=</span> context.getBean(name, ApplicationListener.class);</span><br><span class="line">                    <span class="comment">//获取该监听器支持的事件类型</span></span><br><span class="line">                    <span class="type">ResolvableType</span> <span class="variable">type</span> <span class="operator">=</span> ResolvableType.forClass(listener.getClass()).getInterfaces()[<span class="number">0</span>].getGeneric();</span><br><span class="line">                    <span class="comment">//将原始的listener封装为支持事件类型检查的listener</span></span><br><span class="line">                    <span class="type">GenericApplicationListener</span> <span class="variable">genericApplicationListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationListener</span>() &#123;</span><br><span class="line">                        <span class="comment">//是否支持某个事件类型</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsEventType</span><span class="params">(ResolvableType eventType)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> type.isAssignableFrom(eventType);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">                            listener.onApplicationEvent(event);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    listeners.add(genericApplicationListener);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event, ResolvableType eventType)</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (GenericApplicationListener listener : listeners) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (listener.supportsEventType(ResolvableType.forClass(event.getClass()))) &#123;</span><br><span class="line">                            listener.onApplicationEvent(event);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationEventMulticaster</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventMulticaster</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListenerBean</span><span class="params">(String listenerBeanName)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListenerBean</span><span class="params">(String listenerBeanName)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListeners</span><span class="params">(Predicate&lt;ApplicationListener&lt;?&gt;&gt; predicate)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListenerBeans</span><span class="params">(Predicate&lt;String&gt; predicate)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAllListeners</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event, ResolvableType eventType)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
        <tag>ApplicationListener</tag>
        <tag>EventListener</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算符号</title>
    <url>/2024/07/10/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<img src="d9b621177848d14c0e4bf4f6db7bb8bd.png" alt="截图" style="zoom:50%;" />

<img src="39aa9a6b5c957be71fa161e839493de5.png" alt="截图" style="zoom:50%;" />

<img src="dfbee44eadb50646e843439d958480f5.png" alt="截图" style="zoom:50%;" />

<img src="779cf27779a825892b565d2730f413f2.png" alt="截图" style="zoom:50%;" />

<img src="73abc9c132b7763948dc1e38eecda717.png" alt="截图" style="zoom:50%;" />

<img src="c974b5ed76058f31c7fa0d7ae8a91878.png" alt="截图" style="zoom:50%;" />

<img src="b3853f5b461d17a7fb98e770a5b444a4.png" alt="截图" style="zoom:50%;" />

<img src="c8cd61a86fb17685bb404424480e7986.png" alt="截图" style="zoom:50%;" />

<img src="8d85ae1fac0bf36ee24aada00b326d17.png" alt="截图" style="zoom:50%;" />
]]></content>
      <categories>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>从0开始搭建hexo</title>
    <url>/2024/07/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<ul>
<li>准备环境node.js</li>
<li>切换淘宝源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<ul>
<li>安装hexo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install  -g  hexo-cli</span><br></pre></td></tr></table></figure>

<ul>
<li>验证hexo是否安装成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化hexo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##新建一个文件夹作为hexo的根目录</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<ul>
<li>hexo启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<ul>
<li>博客编写</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇博客文章&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成静态文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?vd_source=6a128c5132a08066dd8c2948fe5e50d4">参考链接</a></p>
]]></content>
  </entry>
  <entry>
    <title>tomcat异常处理</title>
    <url>/2024/07/11/tomcat%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="自定义error控制器"><a href="#自定义error控制器" class="headerlink" title="自定义error控制器"></a>自定义error控制器</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AnnotationConfigServletWebServerApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>(WebConfig.class);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">requestMappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        requestMappingHandlerMapping.getHandlerMethods().forEach(</span><br><span class="line">                (k,v)-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;映射路径：&quot;</span>+k+<span class="string">&quot;，方法信息：&quot;</span>+v);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ErrorProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.BeanNameViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">  <span class="comment">//tomcat容器创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">tomcatServletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcatServletWebServerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">        <span class="keyword">return</span> tomcatServletWebServerFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//DispatcherServlet创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将DispatcherServlet注册到tomcat容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">registrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerMapping <span class="title function_">requestMappingHandlerMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//默认RequestMappingHandlerAdapter没有Jackson转换器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">requestMappingHandlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RequestMappingHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">        adapter.setMessageConverters(Collections.singletonList(<span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>()));</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改Tomcat服务器默认错误页面地址</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ErrorPageRegistrar <span class="title function_">errorPageRegistrar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registry -&gt; registry.addErrorPages(<span class="keyword">new</span> <span class="title class_">ErrorPage</span>(<span class="string">&quot;/error&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误注册中心后置处理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ErrorPageRegistrarBeanPostProcessor <span class="title function_">errorPageRegistrarBeanPostProcessor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorPageRegistrarBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Controller</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Controller1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping(&quot;/error&quot;)</span></span><br><span class="line">        <span class="meta">@ResponseBody</span></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">error</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">e</span> <span class="operator">=</span> (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;error&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="BasicErrorController方式实现"><a href="#BasicErrorController方式实现" class="headerlink" title="BasicErrorController方式实现"></a>BasicErrorController方式实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ErrorProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.BeanNameViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">tomcatServletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcatServletWebServerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">        <span class="keyword">return</span> tomcatServletWebServerFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">registrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerMapping <span class="title function_">requestMappingHandlerMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//默认RequestMappingHandlerAdapter没有Jackson转换器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">requestMappingHandlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RequestMappingHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">        adapter.setMessageConverters(Collections.singletonList(<span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>()));</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改Tomcat服务器默认错误页面地址</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ErrorPageRegistrar <span class="title function_">errorPageRegistrar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registry -&gt; registry.addErrorPages(<span class="keyword">new</span> <span class="title class_">ErrorPage</span>(<span class="string">&quot;/error&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误注册中心后置处理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ErrorPageRegistrarBeanPostProcessor <span class="title function_">errorPageRegistrarBeanPostProcessor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorPageRegistrarBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BasicErrorController <span class="title function_">basicErrorController</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ErrorProperties</span> <span class="variable">errorProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorProperties</span>();</span><br><span class="line">        errorProperties.setIncludeException(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BasicErrorController</span>(<span class="keyword">new</span> <span class="title class_">DefaultErrorAttributes</span>(), errorProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">View</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">                response.getWriter().println(<span class="string">&quot;&lt;h3&gt;服务器内部错误&lt;/h3&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanNameViewResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Controller</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Controller1</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在浏览器访问时 响应头为<code>content-type:text/html</code>不能正确处理 要自定义视图View</li>
<li>响应头中<code>content-type:application/json</code>格式的可以正常访问</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Tomcat</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>ConfigurableApplicaionContext</title>
    <url>/2024/07/10/%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3ApplicationContext/</url>
    <content><![CDATA[<h1 id="ConfigurableApplicaionContext类图"><a href="#ConfigurableApplicaionContext类图" class="headerlink" title="ConfigurableApplicaionContext类图"></a>ConfigurableApplicaionContext类图</h1><p><img src="/2024/07/10/%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3ApplicationContext/1dfc821c5b472f24e420ff6828bc887b.png" alt="截图"></p>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getMessage(<span class="string">&quot;hi&quot;</span>,<span class="literal">null</span>, Locale.CANADA);</span><br></pre></td></tr></table></figure>

<h2 id="根据通配符获取资源"><a href="#根据通配符获取资源" class="headerlink" title="根据通配符获取资源"></a>根据通配符获取资源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getResources(<span class="string">&quot;classpath*:top/javahai/subtlechat/test/**/*.class&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>“classpath*”中的 星号表示jar包中的也会扫描到</p>
<h2 id="获取配置信息"><a href="#获取配置信息" class="headerlink" title="获取配置信息"></a>获取配置信息</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getEnvironment().getProperty(<span class="string">&quot;JAVA_HOME&quot;</span>);</span><br><span class="line">context.getEnvironment().getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context.publishEvent(ApplicationEvent event);</span><br><span class="line">@EventListener</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ConfigurableApplicaionContext</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>获取方法参数名</title>
    <url>/2024/07/10/%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%90%8D/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#编译成class文件</span><br><span class="line">javac xxx.java</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># class里面有加本地变量表 asm使用 被编译的是接口方法无效</span><br><span class="line">javac -g xxx.java</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># class里面有加方法参数 jdk反射使用使用</span><br><span class="line">javac -parameters xxx.java</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 反编译查看</span><br><span class="line">javap -c -v xxx.java</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="javac-parameters"><a href="#javac-parameters" class="headerlink" title="javac -parameters"></a>javac -parameters</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">foo</span><span class="params">(String name,String value)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Bean1.class.getMethod(<span class="string">&quot;foo&quot;</span>, String.class,String.class);</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : method.getParameters()) &#123;</span><br><span class="line">            System.out.println(parameter.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br/>

<img src="fdd529e96aa46a13bbec92fda59bc85a.png" alt="截图" style="zoom:50%;" />

<h2 id="javac-g"><a href="#javac-g" class="headerlink" title="javac -g"></a>javac -g</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.LocalVariableTableParameterNameDiscoverer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A22</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LocalVariableTableParameterNameDiscoverer localVariableTableParameterNameDiscoverer=<span class="keyword">new</span> <span class="title class_">LocalVariableTableParameterNameDiscoverer</span>();</span><br><span class="line">        String[] names = localVariableTableParameterNameDiscoverer.getParameterNames(Bean1.class.getMethod(<span class="string">&quot;foo&quot;</span>, String.class, String.class));</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="3a67ccb53f8e81be4818e44996acd3d9.png" alt="截图" style="zoom:50%;" />
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>对象绑定与类型转换</title>
    <url>/2024/07/10/%E5%AF%B9%E8%B1%A1%E7%BB%91%E5%AE%9A%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<img src="177201d46ad49b83e6d0eb9875f55524.png" alt="截图" style="zoom:50%;" />

<h1 id="底层第一套转换接口"><a href="#底层第一套转换接口" class="headerlink" title="底层第一套转换接口"></a>底层第一套转换接口</h1><img src="0da466df5107c976ec40711bd810def4.png" alt="截图" style="zoom:50%;" />

<h1 id="底层第二套转换接口"><a href="#底层第二套转换接口" class="headerlink" title="底层第二套转换接口"></a>底层第二套转换接口</h1><img src="9d395ee86b7b40a0dd817408cc863bea.png" alt="截图" style="zoom:50%;" />

<h1 id="高层接口与实现"><a href="#高层接口与实现" class="headerlink" title="高层接口与实现"></a>高层接口与实现</h1><img src="282680bf5a8b80c0b0b704e8f470724a.png" alt="截图" style="zoom:50%;" />

<img src="6ffa1aa5090ed128e0950dbf43673414.png" alt="截图" style="zoom:50%;" />

<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><h2 id="SimpleTypeConverter"><a href="#SimpleTypeConverter" class="headerlink" title="SimpleTypeConverter"></a>SimpleTypeConverter</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.SimpleTypeConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSimpleTypeConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SimpleTypeConverter simpleTypeConverter=<span class="keyword">new</span> <span class="title class_">org</span>.springframework.beans.SimpleTypeConverter();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> simpleTypeConverter.convertIfNecessary(<span class="string">&quot;13&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> simpleTypeConverter.convertIfNecessary(<span class="string">&quot;1997/03/21&quot;</span>, Date.class);</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="DirectFieldAccessor"><a href="#DirectFieldAccessor" class="headerlink" title="DirectFieldAccessor"></a>DirectFieldAccessor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.DirectFieldAccessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 走成员变量赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFieldWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TestBeanWrapper.<span class="type">MyBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestBeanWrapper</span>.MyBean();</span><br><span class="line">        DirectFieldAccessor directFieldAccessor=<span class="keyword">new</span> <span class="title class_">DirectFieldAccessor</span>(target);</span><br><span class="line">        directFieldAccessor.setPropertyValue(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        directFieldAccessor.setPropertyValue(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        directFieldAccessor.setPropertyValue(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;1997/03/21&quot;</span>);</span><br><span class="line">        System.out.println(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">MyBean</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Date c;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                    <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, c=&quot;</span> + c +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="BeanWrapper"><a href="#BeanWrapper" class="headerlink" title="BeanWrapper"></a>BeanWrapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanWrapperImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 走反射set方法赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBeanWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        BeanWrapper beanWrapper=<span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>(target);</span><br><span class="line">        beanWrapper.setPropertyValue(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        beanWrapper.setPropertyValue(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        beanWrapper.setPropertyValue(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;1997/03/21&quot;</span>);</span><br><span class="line">        System.out.println(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">MyBean</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Date c;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(String b)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Date <span class="title function_">getC</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setC</span><span class="params">(Date c)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                    <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, c=&quot;</span> + c +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="DataBinder"><a href="#DataBinder" class="headerlink" title="DataBinder"></a>DataBinder</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.MutablePropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.DataBinder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有两种方式</span></span><br><span class="line"><span class="comment"> * 1.走反射set方法</span></span><br><span class="line"><span class="comment"> * 2. dataBinder.initDirectFieldAccess();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDateBinder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        DataBinder dataBinder=<span class="keyword">new</span> <span class="title class_">DataBinder</span>(target);</span><br><span class="line">        dataBinder.initDirectFieldAccess();</span><br><span class="line">        MutablePropertyValues pvs=<span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">        pvs.add(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        pvs.add(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        pvs.add(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;1997/03/21&quot;</span>);</span><br><span class="line">        dataBinder.bind(pvs);</span><br><span class="line">        System.out.println(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">MyBean</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> a;</span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line">        <span class="keyword">private</span> Date c;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(String b)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Date <span class="title function_">getC</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setC</span><span class="params">(Date c)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                    <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, c=&quot;</span> + c +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Web环境下数据绑定ServletRequestDataBinder"><a href="#Web环境下数据绑定ServletRequestDataBinder" class="headerlink" title="Web环境下数据绑定ServletRequestDataBinder"></a>Web环境下数据绑定ServletRequestDataBinder</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ed.test.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.mock.web.MockHttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.ServletRequestDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.ServletRequestParameterPropertyValues;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServletRequestDataBinder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//web环境下数据绑定</span></span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        ServletRequestDataBinder dataBinder=<span class="keyword">new</span> <span class="title class_">ServletRequestDataBinder</span>(target);</span><br><span class="line">        MockHttpServletRequest request=<span class="keyword">new</span> <span class="title class_">MockHttpServletRequest</span>();</span><br><span class="line">        request.setParameter(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        request.setParameter(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        request.setParameter(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;1997/03/21&quot;</span>);</span><br><span class="line">        dataBinder.bind(<span class="keyword">new</span> <span class="title class_">ServletRequestParameterPropertyValues</span>(request));</span><br><span class="line">        System.out.println(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span>  <span class="title class_">MyBean</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> a;</span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line">        <span class="keyword">private</span> Date c;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(String b)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Date <span class="title function_">getC</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setC</span><span class="params">(Date c)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                    <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, c=&quot;</span> + c +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.bilibili.com/video/BV1P44y1N7QG?p=80&spm_id_from=pageDriver&vd_source=6a128c5132a08066dd8c2948fe5e50d4">参考链接</a></p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>SpringWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型与通配符</title>
    <url>/2024/07/25/%E6%B3%9B%E5%9E%8B%E4%B8%8E%E9%80%9A%E9%85%8D%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="什么是泛型？泛型有什么用？"><a href="#什么是泛型？泛型有什么用？" class="headerlink" title="什么是泛型？泛型有什么用？"></a>什么是泛型？泛型有什么用？</h1><p>泛型是JDK5引入的新特性，可以增强代码的可读性与稳定性。</p>
<p>可以在编译期间进行类型检查，通过指定泛型限制传入的对象类型<code>List&lt;Integer&gt; list=new ArrayList&lt;&gt;();</code>这段代码表明<code>list</code>只能传入<code>Integer</code>类型,传入其他类型就会出现错误</p>
<h1 id="泛型使用方式"><a href="#泛型使用方式" class="headerlink" title="泛型使用方式"></a>泛型使用方式</h1><p>可以作用在<strong>类</strong>，<strong>方法</strong>，<strong>接口</strong></p>
<ul>
<li>泛型类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//T 可以是任意的你想要的标识 </span></span><br><span class="line"><span class="comment">//默认约定使用比较多的是T,E,K,V</span></span><br><span class="line"><span class="comment">//T（Type）是最常用的泛型类型参数，用来表示任意类型。</span></span><br><span class="line"><span class="comment">//E（Element）常用于集合框架，表示集合中的元素类型。</span></span><br><span class="line"><span class="comment">//K（Key）和V（Value）常用于键值对，分别表示键的类型和值的类型。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt;  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  T <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br></pre></td></tr></table></figure>

<ul>
<li>泛型方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(T[] array)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Array must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (T element : array) &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个整数数组</span></span><br><span class="line">    Integer[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// 调用printArray方法打印整数数组</span></span><br><span class="line">    printArray(numbers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GenericInterface</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    V <span class="title function_">getKey</span><span class="params">(K key)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericClass</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">GenericInterface</span>&lt;String,String&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key+<span class="string">&quot; world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericInterface&lt;String,String&gt; genericInterface=<span class="keyword">new</span> <span class="title class_">GenericClass</span>&lt;String,String&gt;();</span><br><span class="line">        System.out.println(genericInterface.getKey(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="什么是泛型擦除机制？"><a href="#什么是泛型擦除机制？" class="headerlink" title="什么是泛型擦除机制？"></a>什么是泛型擦除机制？</h1><p><strong>Java编译器在编译期间会将所有的泛型都擦除掉 泛型为T的变为Object,T extends xxx变为限定类型xxx</strong></p>
<p>编写的代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">List</span>&gt; clazz = list.getClass();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">addMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">    addMethod.invoke(list, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>javac xxx.java</code>编译之后的class如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] var0)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ArrayList</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    var1.add(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">var2</span> <span class="operator">=</span> var1.getClass();</span><br><span class="line">    <span class="comment">//利用反射调用add方法将字符串加入到list里面去 绕过编译器检查</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, Object.class);<span class="comment">//这里的Object.class指定的入参数据类型 这里必须指定为Object.class 间接证明泛型被擦除后都是Object.class</span></span><br><span class="line">    var3.invoke(var1, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到<code>String</code>在编译成class文件之后被擦除掉了</p>
<h1 id="为什么要擦除？"><a href="#为什么要擦除？" class="headerlink" title="为什么要擦除？"></a>为什么要擦除？</h1><ul>
<li>使用泛型的时候可以进行类型检查</li>
<li>如果不使用泛型，而直接使用Object类，那么就必须要进行强制类型转换，代码可读性低</li>
<li>泛型可以使用自己指定的限定类型 <code>T extends xxx</code> <code>T super xxx</code></li>
</ul>
<h1 id="什么是桥方法？"><a href="#什么是桥方法？" class="headerlink" title="什么是桥方法？"></a>什么是桥方法？</h1><p>桥方法(Bridge Method) 用于继承泛型类时保证多态。桥方法由编译器生成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericClass</span>&lt;T&gt;  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(T param)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Generic method with type: &quot;</span> + param.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Generic method with type: &quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类，没有使用泛型参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">GenericClass</span>&#123;</span><br><span class="line">  <span class="comment">// 这里没有显式声明method方法，但编译器会生成桥方法</span></span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteClass</span> <span class="variable">concreteClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass</span>();</span><br><span class="line">        concreteClass.method(<span class="string">&quot;Hello, World!&quot;</span>); <span class="comment">// 调用桥方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>控制台打印如下：</p>
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.64dr3c55cp.webp" alt="image" style="zoom:50%;" />

<h1 id="泛型的限制"><a href="#泛型的限制" class="headerlink" title="泛型的限制"></a>泛型的限制</h1><ul>
<li>只能声明 不能实例化 即不能<code>new T()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericClass</span>&lt;T&gt;  &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试实例化类型参数T的错误用法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incorrectInstantiation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>(); <span class="comment">// 错误：类型T不是直接的类或接口类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型参数不能是基本数据类型。基本类型不是Object.class的子类</li>
<li>不能实例化泛型参数数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incorrectArrayInstantiation</span><span class="params">()</span> &#123;</span><br><span class="line">    T[] array = <span class="keyword">new</span> <span class="title class_">T</span>[<span class="number">10</span>]; <span class="comment">// 错误：无法创建泛型类型的数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 尝试实例化类型参数T的错误用法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    GenericClass&lt;String&gt; genericClass = <span class="keyword">new</span> <span class="title class_">GenericClass</span>&lt;&gt;();</span><br><span class="line">    genericClass.incorrectArrayInstantiation(); <span class="comment">// 编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不能实例化泛型数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericClass</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T[] items; <span class="comment">// 错误：不能直接实例化泛型数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericClass</span><span class="params">()</span> &#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="title class_">T</span>[<span class="number">10</span>]; <span class="comment">// 编译错误：类型T不是直接的类或接口类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型无法使用 <code>instanceof</code> 和 <code>getClass()</code> 进行类型判断</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericClass</span>&lt;T&gt;  &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericClass</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试使用instanceof操作符，这将导致编译错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canUseInstanceOf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data <span class="keyword">instanceof</span> T; <span class="comment">// 错误：类型参数T在运行时不是一个有效的类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试获取泛型类型的Class对象，这将导致编译错误</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;T&gt; <span class="title function_">getClassOfT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Class&lt;T&gt;) data.getClass(); <span class="comment">// 错误：类型参数T在运行时不是一个有效的类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericClass&lt;String&gt; stringDemo = <span class="keyword">new</span> <span class="title class_">GenericClass</span>&lt;&gt;(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        <span class="comment">// 下面的调用将导致编译错误</span></span><br><span class="line"><span class="comment">//         boolean canUseInstanceOf = stringDemo.canUseInstanceOf();</span></span><br><span class="line"><span class="comment">//         Class&lt;T&gt; classOfT = stringDemo.getClassOfT();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正确的使用方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> stringDemo.data;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isInstanceOfString</span> <span class="operator">=</span> data <span class="keyword">instanceof</span> String; <span class="comment">// 正确：data是String类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Is instance of String? &quot;</span> + isInstanceOfString);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = data.getClass(); <span class="comment">// 正确：getClass()返回Object的Class对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Class of data: &quot;</span> + clazz.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不能实现两个不同泛型参数的同一接口，擦除后多个父类的桥方法将冲突</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericInterface</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(T param)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个实现，使用Integer类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstImplementation</span> <span class="keyword">implements</span> <span class="title class_">GenericInterface</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Integer param)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FirstImplementation with Integer: &quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个实现，使用String类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SecondImplementation</span> <span class="keyword">implements</span> <span class="title class_">GenericInterface</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(String param)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SecondImplementation with String: &quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试实现两个泛型接口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleImplementation</span> <span class="keyword">extends</span> <span class="title class_">FirstImplementation</span> <span class="keyword">implements</span> <span class="title class_">GenericInterface</span>&lt;Double&gt; &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.1e8i4sk9g4.webp" alt="image" style="zoom:50%;" />

<ul>
<li>不能使用 static 修饰泛型变量</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.lz0ral12.webp" alt="image" style="zoom:50%;" />

<h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><h2 id="什么是通配符？有什么作用？"><a href="#什么是通配符？有什么作用？" class="headerlink" title="什么是通配符？有什么作用？"></a>什么是通配符？有什么作用？</h2><p>因为泛型类型是固定的，有些场景下使用起来不灵活，通配符允许类型参数变化，解决泛型无法协变的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//限制类型为A的子类</span></span><br><span class="line">&lt;? <span class="keyword">extends</span> <span class="title class_">A</span>&gt;</span><br><span class="line"><span class="comment">//限制类型为B的父类</span></span><br><span class="line">&lt;? <span class="built_in">super</span> B&gt;</span><br></pre></td></tr></table></figure>

<h2 id="通配符-？和常用的泛型-T-之间有什么区别？"><a href="#通配符-？和常用的泛型-T-之间有什么区别？" class="headerlink" title="通配符 ？和常用的泛型 T 之间有什么区别？"></a>通配符 ？和常用的泛型 T 之间有什么区别？</h2><ul>
<li><code>T</code> 可以用于声明变量或常量而 <code>?</code> 不行。</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/erdong27/picx-images-hosting@master/img/image.2obfb4d0pe.webp" alt="image" style="zoom:50%;" />

<ul>
<li><code>T</code> 一般用于声明泛型类或方法，通配符 <code>?</code> 一般用于泛型方法的调用代码和形参。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于声明泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">//泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(T element)</span> &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(List&lt;? <span class="built_in">super</span> T&gt; list, T element)</span> &#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>T</code>在编译期会被擦除为限定类型或 <code>Object</code>，通配符用于捕获具体类型。</li>
</ul>
<h2 id="无界通配符"><a href="#无界通配符" class="headerlink" title="无界通配符"></a>无界通配符</h2><p>无界通配符可以接收任何泛型类型数据，用于实现不依赖于具体类型参数的简单方法，可以捕获参数类型并交由泛型方法进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">(Person&lt;?&gt; p)</span> &#123;</span><br><span class="line">  <span class="comment">// 泛型方法自行处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//持有某种特定类型的List,不知道具体是哪种类型。添加元素会报错</span></span><br><span class="line">List&lt;?&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list1.add(<span class="string">&quot;Hello&quot;</span>);<span class="comment">//报错</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list2.add(<span class="string">&quot;World&quot;</span>);<span class="comment">//警告</span></span><br></pre></td></tr></table></figure>

<h2 id="上边界通配符"><a href="#上边界通配符" class="headerlink" title="上边界通配符"></a>上边界通配符</h2><p>上边界通配符 extends 可以实现泛型的向上转型即传入的类型实参必须是指定类型的子类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; list <span class="comment">//限制必须是T的子类</span></span><br></pre></td></tr></table></figure>

<h2 id="下边界通配符"><a href="#下边界通配符" class="headerlink" title="下边界通配符"></a>下边界通配符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="built_in">super</span> T&gt; list <span class="comment">//限制必须是T的父类</span></span><br></pre></td></tr></table></figure>

<h2 id="extends-xxx-和-super-xxx-有什么区别"><a href="#extends-xxx-和-super-xxx-有什么区别" class="headerlink" title="? extends xxx 和 ? super xxx 有什么区别?"></a><code>? extends xxx</code> 和 <code>? super xxx</code> 有什么区别?</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//只能用来读取数据</span></span><br><span class="line"> <span class="comment">//因为编译器无法保证添加的对象是列表所能接受的确切类型或其超类</span></span><br><span class="line"> List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; numberList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"> numberList.get(<span class="number">0</span>);</span><br><span class="line"> numberList.add(<span class="number">1</span>);<span class="comment">//会报错</span></span><br><span class="line"><span class="comment">//只能用来添加数据到集合中 因为编译器无法在运行时检查添加的对象是否是确切的类型或其子类  </span></span><br><span class="line">List&lt;? <span class="built_in">super</span> Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">integerList.add(<span class="number">1</span>);</span><br><span class="line">integerList.get(<span class="number">0</span>)<span class="comment">//会报错</span></span><br></pre></td></tr></table></figure>

<h2 id="T-extends-xxx-和-extends-xxx-又有什么区别？"><a href="#T-extends-xxx-和-extends-xxx-又有什么区别？" class="headerlink" title="T extends xxx 和 ? extends xxx 又有什么区别？"></a><code>T extends xxx</code> 和 <code>? extends xxx</code> 又有什么区别？</h2><p><code>T extends xxx</code> 用于定义泛型类和方法 擦除后为xxx类型</p>
<p><code>? extends xxx</code> 用于声明方法形参，接收 xxx 和其子类型</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/XiiX/p/14719568.html">Java 基础 一文搞懂泛型</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>generic</tag>
      </tags>
  </entry>
</search>
